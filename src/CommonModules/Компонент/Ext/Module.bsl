#Область ОбщийФункционал

Функция Создать(Имя = "", ТипСоответствие = Ложь) Экспорт
	Если ТипСоответствие Тогда
		ПараметрыКомпонента = Новый Соответствие();
		ПараметрыКомпонента.Вставить("_Ст", Ложь);
	Иначе
		ПараметрыКомпонента = Новый Структура();
		ПараметрыКомпонента.Вставить("_Ст", Истина);
	КонецЕсли;
	
	ПараметрыКомпонента.Вставить("_ЭтоКомпонент", Истина);
	ПараметрыКомпонента.Вставить("_Имя",       Имя);
	ПараметрыКомпонента.Вставить("_Параметры", Новый Массив());
	ПараметрыКомпонента.Вставить("_Текст",     Новый Массив());
 	ПараметрыКомпонента.Вставить("_События" ,  Новый Массив());
// 	ПараметрыКомпонента.Вставить("_Ошибки",    Новый Массив());
	Возврат ПараметрыКомпонента;	
КонецФункции
Процедура ЗаполнитьИзМакета(ПараметрыКомпонента, ИмяМакета, ТолькоТекст = Ложь) Экспорт
	Текст = ПолучитьОбщийМакет(ИмяМакета).ПолучитьТекст();

	Если ТолькоТекст Тогда
		ПараметрыКомпонента["_Текст"].Добавить(Текст);
	Иначе
		ЗаполнитьИзТекста(ПараметрыКомпонента, Текст);
	КонецЕсли; 
КонецПроцедуры

Процедура ЗаполнитьИзТекста(ПараметрыКомпонента, Текст, СимволДо = "${", СимволПосле = "}") Экспорт
	Запрещенные = ",_ЭтоКомпонент,_Имя,_Параметры,_Текст,_Ст,_События"; // ,_Ошибки,
	ДлинаДо 	= СтрДлина(СимволДо);
	ДлинаПосле  = СтрДлина(СимволПосле);
	ЭтоПараметр = Ложь;
	Номер	    = 1;
	ДлинаВсего  = СтрДлина(Текст);
	Объединить  = Ложь;
	Если ПараметрыКомпонента["_Текст"].Количество() > 0 Тогда
		Объединить = Истина;
	КонецЕсли; 
	Пока 0 < Номер И Номер <= ДлинаВсего Цикл
		ДлинаСимвола = ?(ЭтоПараметр, ДлинаПосле, ДлинаДо);
		Символ = ?(ЭтоПараметр, СимволПосле, СимволДо);
		Конец  = СтрНайти(Текст, Символ, НаправлениеПоиска.СНачала, Номер);
		Если Конец > 0 Тогда
			НайденныйЭлемент = Сред(Текст, Номер, Конец - Номер);
			Номер = Конец + ДлинаСимвола;
		Иначе
			Конец = СтрДлина(Текст);
			НайденныйЭлемент = Сред(Текст, Номер, Конец - Номер + 1);
			Номер = 0;
		КонецЕсли;
		Если СтрНачинаетсяС(НайденныйЭлемент, "_") Тогда
			Если СтрНайти(Запрещенные, "," + НайденныйЭлемент + ",") > 0 Тогда
				ВызватьИсключение("Нельзя использовать зарезервированный " + НайденныйЭлемент + " как параметр");
			КонецЕсли; 
		КонецЕсли; 
		Если ЭтоПараметр Тогда
			ПараметрыКомпонента.Вставить(НайденныйЭлемент);
			ПараметрыКомпонента["_Параметры"].Добавить(НайденныйЭлемент);
		Иначе
			Если Объединить Тогда
				Последний = ПараметрыКомпонента["_Текст"].ВГраница();
				ПараметрыКомпонента["_Текст"][Последний] = ПараметрыКомпонента["_Текст"][Последний] + НайденныйЭлемент;
				Объединить = Ложь;
			Иначе
				ПараметрыКомпонента["_Текст"].Добавить(НайденныйЭлемент);
			КонецЕсли; 
		КонецЕсли; 
		ЭтоПараметр = Не ЭтоПараметр; 	
	КонецЦикла;
КонецПроцедуры
 
Процедура Заполнить(ПараметрыКомпонента, Ключ, Значение) Экспорт
	Если ПараметрыКомпонента.Получить(Ключ) = Неопределено Тогда
		ПараметрыКомпонента.Вставить(Ключ, Значение);
		ПараметрыКомпонента["_Параметры"].Добавить(Ключ);
	Иначе
		ПараметрыКомпонента[Ключ] = Значение;
	КонецЕсли; 	
КонецПроцедуры

Процедура ЗаполнитьВсе(ПараметрыКомпонента, Соответствие) Экспорт
	Для каждого КлЗнч Из Соответствие Цикл
		Заполнить(ПараметрыКомпонента, КлЗнч.Ключ, КлЗнч.Значение);
	КонецЦикла; 	
КонецПроцедуры

Функция ЭтоКомпонент(ПараметрыКомпонента) Экспорт
	Если ТипЗнч(ПараметрыКомпонента) = Тип("Структура") Тогда
		Если ПараметрыКомпонента.Свойство("_ЭтоКомпонент") Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли; 
	Если ТипЗнч(ПараметрыКомпонента) = Тип("Соответствие") Тогда
		Если ПараметрыКомпонента["_ЭтоКомпонент"] = Истина Тогда   //  ЗначениеУстановлено
			Возврат Истина;
		КонецЕсли; 
	КонецЕсли;
	Возврат Ложь;				
КонецФункции

//  Свойства.class = ИмяКласса, Свойства должны существовать!
Процедура ДобавитьКласс(ПараметрыКомпонента, ИмяКласса = Неопределено) Экспорт
	Если ИмяКласса = Неопределено Тогда
		ИмяКласса = ПараметрыКомпонента._Имя;
	КонецЕсли; 
	ТекСвойства = Неопределено;
	
	Если Не ПараметрыКомпонента.Свойство("Свойства") Тогда
		ВызватьИсключение("Ошибка при создании класса " 
			+ ИмяКласса
			+ " у компонента " 
			+ ПараметрыКомпонента._Имя 
			+ " не определены Свойства");
	КонецЕсли; 
		
	Если ПараметрыКомпонента["Свойства"] = Неопределено Тогда
		ТекСвойства = СвойстваКомпонента.Создать();
		ПараметрыКомпонента.Вставить("Свойства", ТекСвойства);
	ИначеЕсли СвойстваКомпонента.ЭтоСвойство(ПараметрыКомпонента["Свойства"]) Тогда
		ТекСвойства = ПараметрыКомпонента["Свойства"];
	Иначе
		// TODO: Перенос в ТекСвойства
		ВызватьИсключение("Ошибка при создании класса " 
			+ ИмяКласса 
			+ "Свойства компонента " 
			+ ПараметрыКомпонента._Имя 
			+ " уже заполнены!");
	КонецЕсли; 

	
	Если ТекСвойства.Свойство("class") Тогда
		Если СвойстваКомпонента.ЭтоСвойство(ТекСвойства["class"]) Тогда
			Класс = ТекСвойства["class"];
		ИначеЕсли ТекСвойства["class"] = Неопределено Тогда
			Класс = СвойстваКомпонента.Создать("Массив");
			ТекСвойства["class"] = Класс; 
		Иначе
			ВызватьИсключение("У компонента " 
				+ ПараметрыКомпонента._Имя + " уже заполнено свойство class значением"
				+ ТекСвойства["class"]);
		КонецЕсли; 
	Иначе	
		Класс = СвойстваКомпонента.Создать("Массив");
		ТекСвойства.Вставить("class", Класс);
	КонецЕсли; 
		 
	Если Класс.Найти(ИмяКласса) = Неопределено Тогда
		Класс.Добавить(ИмяКласса);
	КонецЕсли;  
КонецПроцедуры
 
Функция ВСтроку(ПараметрыКомпонента, ДопПараметры = Неопределено) Экспорт
	Текст = "";
	ЭтоПараметр = Ложь;
	Индекс = 0;
	КолПараметров = ПараметрыКомпонента["_Параметры"].Количество();
	КолТекстов    = ПараметрыКомпонента["_Текст"].Количество();
	ЕстьПараметры = КолПараметров > 0;
	ЕстьТекст     = КолТекстов > 0;
	ПроверятьДоп  = ДопПараметры <> Неопределено;
		
	Пока ЕстьПараметры ИЛИ ЕстьТекст Цикл	
		Если ЭтоПараметр Тогда
			Если ЕстьПараметры Тогда
				ИмяПараметра = ПараметрыКомпонента["_Параметры"][Индекс];
				Параметр = ПараметрыКомпонента[ИмяПараметра];
				Если ПроверятьДоп Тогда
					Если ТипЗнч(Параметр) = Тип("Строка") Тогда
						Если СтрНачинаетсяС(Параметр, "_Сб_")  Тогда
						    ИмяПараметра = Прав(Параметр, СтрДлина(Параметр) - 4);
							Параметр = ДопПараметры[ИмяПараметра];
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
				Если Компонент.ЭтоКомпонент(Параметр) Тогда
					Параметр = Компонент.ВСтроку(Параметр);
				КонецЕсли;
				Если СвойстваКомпонента.ЭтоСвойство(Параметр) Тогда
					Параметр = СвойстваКомпонента.ВСтроку(Параметр);
				КонецЕсли;  
				Текст = Текст + Параметр;	
				Индекс = Индекс + 1;  
				ЕстьПараметры = Индекс < КолПараметров;
				ЕстьТекст = Индекс < КолТекстов;
			КонецЕсли; 
		Иначе
			Если ЕстьТекст Тогда
				Текст = Текст + ПараметрыКомпонента["_Текст"][Индекс];	
			КонецЕсли;
			Если Не ЕстьПараметры Тогда
				Индекс = Индекс + 1;
				ЕстьТекст = Индекс < КолТекстов;
			КонецЕсли;  
		КонецЕсли; 
		ЭтоПараметр = Не ЭтоПараметр;
	КонецЦикла;
	КолСобытий = ПараметрыКомпонента["_События"].Количество();
	Если КолСобытий > 0 Тогда
		Текст = Текст + "<script>";
		Для каждого Событие Из ПараметрыКомпонента["_События"] Цикл
			Текст = Текст + ВСтроку(Событие, ПараметрыКомпонента);
		КонецЦикла; 
		Текст = Текст + "</script>";
	КонецЕсли; 
	Возврат Текст; 
КонецФункции

Функция ВОтвет(ПараметрыКомпонента, Ответ) Экспорт
	Текст = Компонент.ВСтроку(ПараметрыКомпонента);
	Ответ.УстановитьТелоИзСтроки(Текст);
	Возврат Текст;
КонецФункции


Функция ВJSON(Объект, Отступ = "") Экспорт
	ТипОбъект = ТипЗнч(Объект);
	Если ТипОбъект = Тип("Строка") Тогда
		Строка = СтрЗаменить(Объект, """", "\""");
		Строка = СтрЗаменить(Строка, "'", "\u0027");
		//Строка = СтрЗаменить(Строка, Символы.Таб, "\t");
		//Строка = СтрЗаменить(Строка, Символы.ПС, "\n");
		Строка = СтрЗаменить(Строка, Символы.ВТаб, "");
		Строка = СтрЗаменить(Строка, Символы.Таб, "");
		Строка = СтрЗаменить(Строка, Символы.ПС, "");
		//Строка = СтрСоединить(СтрРазделить(Объект
		//	, """" + Символы.ПС // + Символы.ВК + Символы.ВТаб
		//	, Ложь));
		Возврат """" + Строка + """";
	ИначеЕсли ТипОбъект = Тип("Число")        Тогда
	    Возврат Формат(Объект, "ЧРД=.; ЧН=0; ЧГ=0");
	ИначеЕсли ТипОбъект = Тип("Булево")       Тогда
		Возврат ?(Объект, "true", "false");
	ИначеЕсли ТипОбъект = Тип("Неопределено") 
		  ИЛИ ТипОбъект = Тип("Null") Тогда
		Возврат "null";
	ИначеЕсли ТипОбъект = Тип("Дата")  Тогда
		Возврат """" + Формат(Объект,"Л=ru_RU; ДФ='ддд, дд МММ гггг ЧЧ:мм:сс '")  + """";
	ИначеЕсли ТипОбъект = Тип("Структура")
		  ИЛИ ТипОбъект = Тип("Соответствие") Тогда
		ПС = Символы.ПС;
		Результат   = "{";
		Разделитель = "";
		Индекс	    = 0;
		Для каждого КлЗнч Из Объект Цикл
			Ключ      = КлЗнч.Ключ;
			Если ТипЗнч(Ключ) = Тип("Соответствие")
			 ИЛИ ТипЗнч(Ключ) = Тип("Структура") Тогда
				Значение = ВJSON(КлЗнч.Ключ);
				Ключ = """_Ст_Ключ" + Индекс + """";
				Результат = Результат 
						  + Разделитель 
						  + Ключ 
						  + ": " 
						  + Значение;
				Разделитель = ",";
				Ключ = """_Ст_Знач" + Индекс + """";
			Иначе
				Ключ      = ВJSON(КлЗнч.Ключ);
			КонецЕсли; 
			Значение  = ВJSON(КлЗнч.Значение);
			
			Результат = Результат 
					  + Разделитель 
					  + Ключ 
					  + ": " 
					  + Значение;
			Разделитель = ",";
			Индекс = Индекс + 1;
		КонецЦикла; 
		Результат = Результат 
				  + "}";
		Возврат Результат;
	ИначеЕсли ТипЗнч(Объект) = Тип("Массив") Тогда
	    ПС 		    = Символы.ПС;
		Результат   = "[";
		Разделитель = "";
		Для каждого Значение Из Объект Цикл
			Результат = Результат 
					  + Разделитель 
					  + ВJSON(Значение);
			Разделитель = ",";
		КонецЦикла; 
		Результат = Результат 
				  + "]";
		Возврат Результат;
	Иначе
		ВызватьИсключение("Сериализация типа " + ТипЗнч(Объект) + " не определена");
	КонецЕсли; 
КонецФункции

// Используется в функции ЗаполнитьИзJSON
Функция ЗаписатьЗначение(Объект, Значение, Имя)
	ТипОбъекта = ТипЗнч(Объект);
	Если ТипОбъекта = Тип("Структура")
	 ИЛИ ТипОбъекта = Тип("Соответствие") Тогда
		Объект.Вставить(Имя, Значение);
	ИначеЕсли ТипОбъекта = Тип("Массив") Тогда
		Объект.Добавить(Значение);
	Иначе
//		Объект = Значение;
	КонецЕсли;
	Возврат Объект; 	
КонецФункции
// Используется в функции ЗаполнитьИзJSON
Функция ПреобразоватьВСтруктуру(Соответствие)
	Результат = Новый Структура();
	Для каждого КлЗнч Из Соответствие Цикл
		Результат.Вставить(КлЗнч.Ключ, КлЗнч.Значение);
	КонецЦикла; 
	Возврат Результат;	
КонецФункции

Функция СоздатьИзJSON(СтрокаJSON) Экспорт
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	Имя      = "";
	Значение = "";
	ТЗ 		 = ТипЗначенияJSON;
	Дерево   = Новый Массив;
	Объект   = Неопределено;
	Родители = Новый Массив();
	Пока ЧтениеJSON.Прочитать() Цикл
		Т = ЧтениеJSON.ТипТекущегоЗначения;
		
		Если Т = ТЗ.Число ИЛИ Т = ТЗ.Строка 
		 ИЛИ Т = ТЗ.Булево ИЛИ Т = ТЗ.Null Тогда
			Значение = ЧтениеJSON.ТекущееЗначение;
			ЗаписатьЗначение(Объект, Значение, Имя)
		ИначеЕсли Т = ТЗ.ИмяСвойства Тогда
			Имя = ЧтениеJSON.ТекущееЗначение;
		ИначеЕсли Т = ТЗ.НачалоМассива Тогда
			НовыйОбъект = Новый Массив;
			
			Дерево.Добавить(НовыйОбъект);
			Родители.Добавить("");
			
			ЗаписатьЗначение(Объект, НовыйОбъект, Имя);
			Объект = НовыйОбъект;
		ИначеЕсли Т  = ТЗ.НачалоОбъекта Тогда
			НовыйОбъект = Новый Соответствие;
			
			Дерево.Добавить(НовыйОбъект);
			Родители.Добавить(Имя);
			
			ЗаписатьЗначение(Объект, НовыйОбъект, Имя);
			Объект = НовыйОбъект;
		ИначеЕсли Т = ТЗ.КонецМассива Тогда
			ДКолич = Дерево.ВГраница();
			Дерево.Удалить(ДКолич);
			Если ДКолич > 0 Тогда
				Объект = Дерево[ДКолич - 1];
			КонецЕсли; 
			Родители.Удалить(ДКолич);
		ИначеЕсли Т = ТЗ.КонецОбъекта Тогда
			ОбъектСтр = Неопределено;
			Если Объект["_Ст"] <> Неопределено Тогда
				Если Объект["_Ст"] Тогда
					ОбъектСтр = ПреобразоватьВСтруктуру(Объект);
				КонецЕсли; 
			КонецЕсли; 
			ДКолич = Дерево.ВГраница();
			Дерево.Удалить(ДКолич);
			Если ДКолич > 0 Тогда
				Объект = Дерево[ДКолич - 1];
			КонецЕсли; 
			Если ЗначениеЗаполнено(ОбъектСтр) Тогда
				Если ТипЗнч(Объект) = Тип("Массив") Тогда
					Объект[Объект.ВГраница()] = ОбъектСтр;
				Иначе
					ИмяРодителя = Родители[ДКолич];
					Объект[ИмяРодителя] = ОбъектСтр;
				КонецЕсли; 
			КонецЕсли;  
			Родители.Удалить(ДКолич);
		//ИначеЕсли Т = ТЗ.Комментарий
		//      ИЛИ Т = ТЗ.Ничего Тогда Тогда
		КонецЕсли; 
	КонецЦикла;
	ЧтениеJSON.Закрыть(); 
	Возврат Объект;
КонецФункции

Функция Объединить(Приемник, Источник, Параметр = Неопределено) Экспорт
    Если Не Компонент.ЭтоКомпонент(Приемник) Тогда 
		ВызватьИсключение("Приемник не является Компонентом: " + Строка(Приемник));
    ИначеЕсли Не Компонент.ЭтоКомпонент(Источник) Тогда
		ВызватьИсключение("Источник не является Компонентом: " + Строка(Источник));
	КонецЕсли; 
    
    Индекс = 0;
	ВКонец = Ложь;
	Если Параметр = Неопределено Тогда
		Индекс = Приемник["_Текст"].ВГраница();
		ВКонец = Истина;
	Иначе
		Для Индекс = 0 По Приемник["_Параметры"].ВГраница() Цикл
			Ключ = Приемник["_Параметры"][Индекс];
			Если Ключ = Параметр Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		Приемник.Удалить(Параметр);
		Приемник["_Параметры"].Удалить(Индекс); 
	КонецЕсли;
	
	Т = "_Текст";
	Если Источник[Т].Количество() > 0 Тогда
		Приемник[Т][Индекс] = Приемник[Т][Индекс] + Источник[Т][0];
		Если Источник[Т].Количество() > 1 Тогда
			Если ВКонец Тогда
                Приемник[Т].Добавить(Источник[Т][Источник[Т].ВГраница()]);
			Иначе	
				Приемник[Т][Индекс + 1] = Источник[Т][Источник[Т].ВГраница()] + Приемник[Т][Индекс + 1];
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;

	// Индекс = Индекс + 1;
	Для Сч = 1-Источник[Т].ВГраница() По -1 Цикл
		Приемник[Т].Вставить(Индекс + 1, Источник[Т][-Сч]);
	КонецЦикла; 
	Т = "_Параметры";
	Для Сч = -Источник[Т].ВГраница() По 0 Цикл
		Ключ = Источник[Т][-Сч];
		Приемник[Т].Вставить(Индекс, Ключ);  
		
		ЗнчКлюча = Неопределено;
		Если Приемник._Ст Тогда
			Приемник.Свойство(Ключ, ЗнчКлюча);
		Иначе
			ЗнчКлюча = Приемник[Ключ];
		КонецЕсли; 
		Если ЗначениеЗаполнено(ЗнчКлюча) Тогда
			Приемник[Ключ] = Источник[Ключ];
		Иначе
			Приемник.Вставить(Ключ, Источник[Ключ]);
		КонецЕсли; 
	КонецЦикла; 
	Возврат Приемник;
КонецФункции
 
#КонецОбласти


#Область Компоненты

Функция СоздатьСтраницу(ТекстЗаголовка = "") Экспорт
	Страница = Компонент.Создать();
	Компонент.ЗаполнитьИзТекста(Страница, 
		"<!DOCTYPE html>
		|<html lang=""en"">
		|${Заголовок}
		|${Тело}
		|</html>");
	
	Заголовок = СоздатьЗаголовокСтраницы(ТекстЗаголовка);
	Заголовок.Стили.Добавить("<link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css"">");
	Заголовок.ТелоЗаголовка.Добавить("<script src=""https://code.jquery.com/jquery-3.1.1.min.js"" crossorigin=""anonymous""></script>");
	Заголовок.ТелоЗаголовка.Добавить("<script src=""https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.js""></script>");
	Заголовок.ТелоЗаголовка.Добавить("<script src=""https://unpkg.com/axios/dist/axios.min.js""></script>");
	АдресСервера = "/" + Константы.ИмяСервера.Получить() + "/hs/atp/";
	Если Не ЗначениеЗаполнено(АдресСервера) Тогда
		ВызватьИсключение("Не заполнена константа АдресСервера в режиме 1С Предприятие ");
	КонецЕсли; 
	Заголовок.ТелоЗаголовка.Добавить("<script src=""" + АдресСервера + "main.js""></script>");	
	
	Страница = Объединить(Страница, Заголовок, "Заголовок");
	
	Тело = Создать("Тело");
	ЗаполнитьИзТекста(Тело, "<div ${Свойства}>${Текст}</div>");
	ДобавитьКласс(Тело, "Тело");
	Тело.Текст = "Сейчас загружу...";
	
	Страница.Тело = Тело;
	
	//События.СкриптКомпонента(Страница, Истина);
	//События.ДобавитьВЭлементы(Страница, Тело);
	
	//События.ПриЗагрузкеСтраницы(Страница, "ОбновитьНаСервере('Тело');");	
	Возврат Страница;	
КонецФункции
Функция СоздатьЗаголовокСтраницы(ТекстЗаголовка = "")
	Заголовок = Компонент.Создать();
	Компонент.ЗаполнитьИзТекста(Заголовок, "
		| <head>
		| 	<meta charset=""UTF-8"">
	    | 	<meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
	    | 	<meta http-equiv=""X-UA-Compatible"" content=""ie=edge"">
	    | 	${Стили}
	    | 	<title>${Заголовок}</title>
	    | 	${ТелоЗаголовка} 
	  //  | 	${СкриптКомпонента}
	    | </head>");
	Заголовок.Заголовок 	= ТекстЗаголовка;
	Заголовок.Стили 		= СвойстваКомпонента.Создать("Массив");
	Заголовок.ТелоЗаголовка = СвойстваКомпонента.Создать("Массив");
	Возврат Заголовок; 
КонецФункции
  
Функция СоздатьКнопку(Имя = "") Экспорт
	Кнопка = Создать(Имя);
	ЗаполнитьИзТекста(Кнопка, "<button ${Свойства}>${Текст}</button>");
	ДобавитьКласс(Кнопка, "ui button");
	События.ПриНажатии(Кнопка);
	Возврат Кнопка;
КонецФункции

Функция СоздатьПолеВвода(Имя = "") Экспорт
	ПолеВвода = Создать(Имя);
	ЗаполнитьИзТекста(ПолеВвода, "
		| <div ${Свойства}>
		| 	<input type='text' value='${Значение}' placeholder='${ПодсказкаВвода}'>
		|	${Тело}
		| </div>");
	ДобавитьКласс(ПолеВвода, "ui input");
	ДобавитьКласс(ПолеВвода);
	События.ПриИзменении(ПолеВвода
		, "Реквизиты." 
		+ Имя 
		+ ".Значение=Элементы."
		+ Имя
		+ ".querySelector('input').value;");
	Возврат ПолеВвода;
КонецФункции

Функция СоздатьКонтейнер(Имя = "") Экспорт
	Контейнер = Создать(Имя);
	ЗаполнитьИзТекста(Контейнер, "<div ${Свойства}>${Тело}</div>");
	ДобавитьКласс(Контейнер, "ui container");
	Возврат Контейнер;		
КонецФункции
 

Функция СоздатьКартинку(Имя = "") Экспорт
	Картинка = Создать(Имя);
	ЗаполнитьИзТекста(Картинка, "<div ${Свойства}><img src=""${ПутьКДанным}""></div>");
	ДобавитьКласс(Картинка, "ui image");
	Размеры(Картинка, "Малый");
	Возврат Картинка;
КонецФункции

Функция Размеры(ПараметрыКомпонента, НовыйРазмер) Экспорт
	РазмерыКомпонентов = Новый Структура("Аватар, Мини, Маленький, Малый, Средний, Больший ,Большой, Здоровый, Гигантский, ПоШирине"
									 ,"avatar","mini","tiny","small", "medium", "large", "big",    "huge", "massive", "fluid" );
	Для Номер = 1 По 16 Цикл
		РазмерыКомпонентов.Вставить("Ширина" + Номер
			, ЧислоПрописью(Номер,"L=en",",,,,0") + "wide");
	КонецЦикла;
	Свойства = Неопределено; 
	Если Не ПараметрыКомпонента.Свойство("Свойства", Свойства) Тогда
		ВызватьИсключение("При установке размера у компонента " 
			+ ПараметрыКомпонента._Имя 
			+ " должно быть определено поле Свойства");
	КонецЕсли;
	Если Свойства = Неопределено Тогда
		ДобавитьКласс(ПараметрыКомпонента, "");
	КонецЕсли;  
	Класс = ПараметрыКомпонента["Свойства"]["class"];
	
	Представление = РазмерыКомпонентов[НовыйРазмер];
	Если Не ПараметрыКомпонента.Свойство("Размер") Тогда
		ПараметрыКомпонента.Вставить("Размер", НовыйРазмер);
	Иначе
		ПослПредставл = РазмерыКомпонентов[ПараметрыКомпонента.Размер];
		Класс.Удалить(Класс.Найти(ПослПредставл));	
		ПараметрыКомпонента.Размер = НовыйРазмер;
	КонецЕсли; 
	ДобавитьКласс(ПараметрыКомпонента, Представление);
КонецФункции


// поля: Путь, АдресКартинки, События(ПриУспехе, ПриОшибке), СкриптВалидации
Функция СоздатьФормуАвторизации(Имя = "ФормаАвторизации") Экспорт
	Форма = Создать(Имя);
	ЗаполнитьИзМакета(Форма, "Авторизация");
	ЗаполнитьИзТекста(Форма, "<script>${Валидация}${События}</script>");
	ДобавитьКласс(Форма, "ui form");
	ДобавитьКласс(Форма);
	
	Форма.Путь = "./";
	Форма.АдресКартинки = "https://semantic-ui.com/examples/assets/images/logo.png";
	Размеры(Форма, "ПоШирине");
    
	Форма.Валидация = СоздатьСкриптВалидацииФормы();
    Форма.Валидация.ИмяФормы = Имя;
    
	Форма.События = СоздатьСкриптОбработкиФормы();
    Форма.События.ИмяФормы = Имя;
    Возврат Форма;	
КонецФункции
 
// поля: ИмяФормы, Поля(Заполняются в функции)
Функция СоздатьСкриптВалидацииФормы(ИменаОбъектов = Неопределено, Правила = Неопределено)
	
	//  https://1.semantic-ui.com/behaviors/form.html      - Заполнение объекта fields
	//  https://semantic-ui.com/behaviors/form.html#/usage - Описание правил
	
	//  JSОбъект - Заполняем только ключи(Ключи без кавычек через запятую)
	Поля = СвойстваКомпонента.Создать("JSОбъект", Истина);

	
	Если ИменаОбъектов = Неопределено Тогда
		Правила = Новый Массив();
		ИменаОбъектов = Новый Массив();
	
		ИменаОбъектов.Добавить("user");
		ПравилоИмени = Новый Массив();
		ПравилоИмени.Добавить(СтрРазделить("empty,Пожалуйста введите имя пользователя", ","));
		Правила.Добавить(ПравилоИмени);

		//ИменаОбъектов.Добавить("email");
		//ПравилоПочты = Новый Массив();
		//ПравилоПочты.Добавить(СтрРазделить("empty,Пожалуйста введите свой e-mail", ","));
		//ПравилоПочты.Добавить(СтрРазделить("email,Пожалуйста введите правильный e-mail", ","));
		//Правила.Добавить(ПравилоПочты);

		ИменаОбъектов.Добавить("password");
		ПравилоПароля = Новый Массив();
		ПравилоПароля.Добавить(СтрРазделить("empty,Пожалуйста введите свой password", ","));
		ПравилоПароля.Добавить(СтрРазделить("length[2],Пароль должен быть не меньше 2 символов", ","));
		Правила.Добавить(ПравилоПароля);
	КонецЕсли; 

	Для Индекс = 0 По ИменаОбъектов.ВГраница() Цикл
		Объект = Компонент.Создать();
		Компонент.ЗаполнитьИзТекста(Объект, "
				| ${Название}:{
				|   identifier: '${Название}',
				|   rules: [${Правила}
				|   ]
				| }");
		Объект.Название = ИменаОбъектов[Индекс];
		//  JSОбъект - Заполняем только ключи(Ключи без кавычек через запятую)
		Объект.Правила = СвойстваКомпонента.Создать("JSОбъект", Истина); 
		
		Для каждого Правило Из Правила[Индекс] Цикл
			ПравилоОбъекта = Компонент.Создать();		
			Компонент.ЗаполнитьИзТекста(ПравилоОбъекта, "
				| { type: '${Тип}', prompt: '${Сообщение}'}");
			ПравилоОбъекта.Тип = Правило[0];
			ПравилоОбъекта.Сообщение = Правило[1];
			Объект.Правила.Вставить(ПравилоОбъекта);
		КонецЦикла; 

		Поля.Вставить(Объект);
	КонецЦикла;
	СкриптПроверки = Компонент.Создать();
	Компонент.ЗаполнитьИзТекста(СкриптПроверки, "
		| $('.${ИмяФормы}').form({fields:{${Поля}}});");  // нужно добавлять форму в Элементы !!!
	СкриптПроверки.Поля = Поля;
	Возврат СкриптПроверки;
КонецФункции
// поля: ИмяФормы, ПриУспехе, ПриОшибке
Функция СоздатьСкриптОбработкиФормы()
	СкриптСобытий  = Компонент.Создать();
	Компонент.ЗаполнитьИзТекста(СкриптСобытий,"
        | $('.${ИмяФормы}').api({
        |     beforeSend: function(settings) {
        |         settings.data = $(this).serializeArray();
		|         return settings;
		|     },
		|     successTest: function(response) {
      	|         return response.success || false;
    	|     },
		|     onFailure: function(response, query) {
		|        query.form('add errors', response.data);
        |        for(let key in response.data) query.form('add prompt', key);
        |        ${ПриОшибке}
        |     },
        |     onSuccess: function(response) {
        |       ${ПриУспехе} 
        |     }
		| });");            // нужно добавлять форму в Элементы !!!
	Возврат СкриптСобытий;
КонецФункции

Функция СоздатьМеню(Имя = "") Экспорт
	Меню = Создать(Имя);
	ЗаполнитьИзТекста(Меню, "
		| <div ${Свойства}>
		| 	${Пункты}
		| 	<div class='right menu'>
		| 		${ПунктыСправа}
		| 	</div>
		| </div>");
	ДобавитьКласс(Меню, "ui stackable secondary pointing container menu");
	
	Меню.Вставить("Вкладка");
	События.ПриНажатии(Меню,"
		| const selected = Реквизиты." + Имя + ".Вкладка;
		| Элементы." + Имя + ".querySelectorAll('.item').forEach(elem=>{
		| 	   if(elem.classList.contains(selected)){
		|          elem.classList.add('active');
		|      }else{
		|          elem.classList.remove('active');
		|      }
		| });");
	
	Меню.Пункты = СвойстваКомпонента.Создать("Массив");
	Меню.ПунктыСправа = СвойстваКомпонента.Создать("Массив");
	Возврат Меню;
КонецФункции

// поля: Текст
Функция СоздатьЭлемент(Имя = "", Текст = "") Экспорт
	Элемент = Создать(Имя);
	ЗаполнитьИзТекста(Элемент, "<${Тег} ${Свойства}>${Текст}</${Тег}>");
	Элемент.Тег = "a";
	Элемент.Текст = ?(Текст = "", Имя, Текст);
	
	//СкриптПриНажатии = Создать();
	//Компонент.ЗаполнитьИзТекста(СкриптПриНажатии,"
	//    | Реквизиты.${Имя}.Свойства.class.push('active');
	//    | ОбновитьНаКлиенте('${Имя}');
	//	| ");
	//СкриптПриНажатии.Имя = Имя;
	
	//События.ПриНажатии(Элемент, "Элементы." + Имя + ".classList.push('active');");
	ДобавитьКласс(Элемент);
	ДобавитьКласс(Элемент, "ui item");
	Возврат Элемент;
КонецФункции
  

  
// поля: Заголовок, Тело, СкриптПоказать, СкриптСкрыть  
Функция СоздатьМодальноеОкно(Имя = "") Экспорт
	Окно = Создать(Имя);
	ЗаполнитьИзТекста(Окно, "
		| <div ${Свойства}>
		| 	<i class='close icon'></i>
		| 	<div class='header'>
		|     ${Заголовок}
		|   </div>
		|   <div class='content'>
		| 	  ${Тело}
		|   </div>
		| </div>");
	ДобавитьКласс(Окно, "ui image modal");
	Размеры(Окно, "Большой");
	
	Окно.Вставить("СкриптПоказать", "
		| $(Элементы." + Имя + ").modal('show');");
	Окно.Вставить("СкриптСкрыть",   "
		| $(Элементы." + Имя + ").modal('hide');");
	Возврат Окно;
КонецФункции
   
Функция СоздатьКарточкуКонтрагента(Имя = "") Экспорт
	Карточка = Компонент.Создать(Имя);  
    ЗаполнитьИзТекста(Карточка,"
		  |<div ${Свойства}>
		  |  <div class='image'>
// 		  |    ${Номер}
		  |    <img src='${Логотип}'>
		  |  </div>
		  |  <div class='content'>
		  |    <div class='header'>${Представление}</div>
		  |    <div class='meta'>${ПолноеНаименование}</div>
		  |    <div class='description'><p>Договор по умолчанию:${Договор}</p><p>ИНН:${ИНН}</p></div>
		  |  </div>
		  |  <div class='extra content'>
		  |    ${ДатаРегистрации}
		  |  </div>
		  |</div>");
	ДобавитьКласс(Карточка, "card");
	Карточка.Вставить("Ид", "");
	Возврат Карточка;	
КонецФункции

Функция СоздатьКарточки(Имя = "") Экспорт
	Карточки = Компонент.Создать(Имя);  
    Компонент.ЗаполнитьИзТекста(Карточки,"
		|<div ${Свойства}>
		|  ${Список}
		|</div>");
	Карточки.Список = СвойстваКомпонента.Создать("Список", Истина);
	Компонент.ДобавитьКласс(Карточки, "ui four doubling cards");
	Компонент.ДобавитьКласс(Карточки);
	Возврат Карточки;	
КонецФункции

Функция СоздатьСписок(Имя = "") Экспорт
	Список = Компонент.Создать(Имя);  
    Компонент.ЗаполнитьИзТекста(Список,"
		|<div ${Свойства}>
		|  ${СписокЭлементов}
		|</div>");
	Список.СписокЭлементов = СвойстваКомпонента.Создать("Список", Истина);
	Компонент.ДобавитьКласс(Список, "ui items");
	Компонент.ДобавитьКласс(Список);

	Возврат Список;	
КонецФункции
 
Функция СоздатьРазделитель() Экспорт
	Возврат "<div class='ui divider'></div>";
КонецФункции

Функция СоздатьНумерацию(Имя = "", Листов = 1, Лист = 1) Экспорт
	Нумерация = Создать(Имя);
	ЗаполнитьИзТекста(Нумерация,"
		| <div ${Свойства}>
		| </div>");
	ДобавитьКласс(Нумерация, "ui pagination menu");
	ДобавитьКласс(Нумерация);
    Нумерация.Вставить("Лист", Лист);
    Нумерация.Вставить("Листов", Листов);
    Нумерация.Вставить("Элементов", 6);
	Нумерация.Вставить("ЛистПоУмолчанию", 1);

	События.ПослеЗагрузкиКомпонента(Нумерация, "
		| Обновить" + Имя + " = window.ОбновитьНумерацию" + Имя + " || function(){
		|   const pagination = Реквизиты." + Имя + ";
		|   const component  = Элементы." + Имя + ";
		|   const pages = pagination.Листов;
		|   if(pages<2)return component.innerHTML='';
		|   let page  = pagination.Лист || pagination.ЛистПоУмолчанию;
		|   if(page>pages){
		|       page = pages;
		|       pagination.Лист = page;
		|   }
		|   if(page<1){
		|       page = 1;
		|       pagination.Лист = page;
		|   }
		| 
		|   let count = pagination.Элементов;
		|   count = count < pages ? count : pages;
		|   let begin = page - parseInt(count/2);
		|   begin = begin < 1 ? 1 : begin;
		|   begin = begin + count >= pages ? pages - count + 1 : begin;
		|   const makeItem = function(num, parent, className, isActive, isDisabled=false){
		|       const elem = parent.appendChild(document.createElement('a'));
		|       elem.classList.add('item');
		|       className && elem.classList.add(className);
		|       isActive && elem.classList.add('active');
		|       isDisabled && elem.classList.add('disabled');
		|       if(typeof(num)==='string'){elem.innerHTML = num;}
		|       else{elem.appendChild(num);};
		|       return elem;
		|   };
		|   const makeIcon = function(direction,isDouble){
		|       const elem = document.createElement('i');
		|       elem.classList.add('angle');
		|       if(isDouble) elem.classList.add('double');
		|       elem.classList.add(direction);
		|       elem.classList.add('icon');
		|       return elem;
		|   };
		|   const newElement = document.createDocumentFragment();
		|   makeItem(makeIcon('left', true), newElement, 'page1', false, page===1);
		|   makeItem(makeIcon('left', false), newElement, 'page'+(page-1>1?page-1:1), false, page===1);
		|   for(let i=begin;i<begin+count;i++){
		|       makeItem(''+i, newElement, 'page'+i, i===page);
		|   };
		|   makeItem(makeIcon('right', false), newElement, 'page'+(page+1<pages?page+1:pages), false, page===pages);
		|   makeItem(makeIcon('right', true), newElement, 'page'+pages, false, page===pages);
		|   component.innerHTML='';
		|   component.appendChild(newElement);
		| };
		| Обновить" + Имя + "();");
	События.ПриНажатии(Нумерация, "
		| let elem = Событие.target;
		| const component = Реквизиты." + Имя + ";
		| while(!elem.classList.contains('item')){
		|     elem=elem.parentNode;
		|     if(elem.classList.contains('pagination')) return;
		|     if(elem.tagName==='BODY') return;
		| }
		| if(elem.classList.contains('disabled')) return;
		| for(let name of elem.classList){
		|     if(name.startsWith('page')){
		|         component.Лист = parseInt(name.substring(4));
		|         Обновить" + Имя + "();
		|         break;
		|     }
		| }");
	Возврат Нумерация;		
КонецФункции
   
#КонецОбласти 
 

