Функция Обновить(Имя, ТекКомпонент, ПараметрыКлиента) Экспорт
	Если Имя = "Тело"                 Тогда
		Возврат Тело(           ТекКомпонент, ПараметрыКлиента);
	ИначеЕсли Имя = "Содержание"      Тогда
		Возврат Содержание(     ТекКомпонент, ПараметрыКлиента); 
	ИначеЕсли Имя = "КнопкаВойти"     Тогда
		Возврат КнопкаВойти(    ТекКомпонент, ПараметрыКлиента); 
	ИначеЕсли Имя = "Меню" Тогда 
		Возврат Меню(           ТекКомпонент, ПараметрыКлиента); 
	ИначеЕсли Имя = "МодальноеОкно"   Тогда
		Возврат МодальноеОкно(  ТекКомпонент);
	ИначеЕсли Имя = "Контрагенты"       Тогда
		Возврат КарточкиКонтрагентов(ТекКомпонент, "Контрагенты"); 	
	ИначеЕсли Имя = "Товары"       Тогда
		Возврат СписокТоваров(  ТекКомпонент, "Товары"); 	
	КонецЕсли;
КонецФункции

Функция Тело(ТекКомпонент = Неопределено, Клиент = Неопределено) Экспорт
	Реквизит = Компонент.Создать("Тело");
	Компонент.ЗаполнитьИзТекста(Реквизит, "
		|<div ${Свойства}>
		|  ${Контейнер}
		|</div>");
	Компонент.ДобавитьКласс(Реквизит);

	Контейнер = Компонент.СоздатьКонтейнер();
	Контейнер.Тело = СвойстваКомпонента.Создать("Массив");
	
	Контейнер.Тело.Добавить(Меню( , Клиент));
	Контейнер.Тело.Добавить(МодальноеОкно());
 	Контейнер.Тело.Добавить(Содержание( , Клиент));

	Реквизит.Контейнер = Контейнер;
	Возврат Реквизит;		
КонецФункции

Функция Меню(Меню = Неопределено, Клиент = Неопределено)
	Имя = "Меню";
	Если Меню = Неопределено Тогда
		Меню = Компонент.СоздатьМеню(Имя);
		Компонент.ДобавитьКласс(Меню);
	    Меню.Вкладка = "ПунктТовары";
		
		ПунктТовары = Компонент.СоздатьЭлемент("ПунктТовары");
		ПунктТовары.Текст = "Товары";
	 	Компонент.ДобавитьКласс(ПунктТовары, "active");
		События.ПриНажатии(ПунктТовары, "
			| Реквизиты.Меню.Вкладка='ПунктТовары';
			| Реквизиты.Содержание.Тип='Товары';
			| ОбновитьНаСервере('Содержание');
			| ");
		Меню.Пункты.Добавить(ПунктТовары);

	
		Поиск = Компонент.СоздатьПолеВвода("Поиск");
		ИконкаПоиска = "<i class='search link icon'></i>";
		Компонент.ДобавитьКласс(Поиск, "category search focus icon");
		Поиск.Тело = ИконкаПоиска;
		Поиск.ПриИзменении.Добавить("
			| Реквизиты.Меню.Вкладка='ПунктТовары';
			| Реквизиты.Содержание.Отбор=Реквизиты.Поиск.Значение;
			| ОбновитьНаСервере('Содержание');");
		Меню.ПунктыСправа.Добавить(Поиск);

		ПунктПользователь = Компонент.СоздатьЭлемент("ИмяПользователя");
        ПунктПользователь.Текст = "";
		События.ПриНажатии(ПунктПользователь, "
			| Реквизиты.Меню.Вкладка='ИмяПользователя';");
		
		Меню.ПунктыСправа.Добавить(ПунктПользователь);
		
		КнопкаВойти = КнопкаВойти(, Клиент);
		События.ПриНажатии(КнопкаВойти,"
			| Реквизиты.Меню.Вкладка='КнопкаВойти';
			| ОбновитьНаКлиенте('Меню');");
		Меню.ПунктыСправа.Добавить(КнопкаВойти);
	Иначе
		КнопкаВойти = Меню.ПунктыСправа[3];
	    КнопкаВойти(КнопкаВойти, Клиент);
	    События.ПриНажатии(КнопкаВойти,"
			| Реквизиты.Меню.Вкладка='КнопкаВойти';");
		
	КонецЕсли; 
	Если Клиент.Состояние = "Аутентифицирован" Тогда
		
		Контрагенты = Компонент.СоздатьЭлемент("ПунктКонтрагенты");
		Контрагенты.Текст = "Контакты";
		События.ПриНажатии(Контрагенты, "
			| Реквизиты.Меню.Вкладка='ПунктКонтрагенты';
			| Реквизиты.Содержание.Тип='Контрагенты';
			| ОбновитьНаСервере('Содержание');");
		Меню.Пункты.Добавить(Контрагенты);

        Меню.ПунктыСправа[2].Текст = Клиент.Пользователь;
	Иначе
		Если Меню.Пункты.Количество() > 2 Тогда
			Если Меню.Пункты[2]._Имя = "ПунктКонтрагенты" Тогда
				Меню.Пункты.Удалить(2);
			КонецЕсли; 
		КонецЕсли; 
        Если Клиент.Состояние = "Авторизован" Тогда
			Меню.ПунктыСправа[2].Текст = Клиент.Пользователь;
		Иначе
			Меню.ПунктыСправа[2].Текст = "";
		КонецЕсли;
	КонецЕсли;
	Возврат Меню;	 
КонецФункции
 

Функция СкриптПриИзмененииАвторизации()
	Текст = "
		| ОбновитьНаСервере('Меню');
	 	| Реквизиты.Содержание.Тип = 'Товары';
	 	| ОбновитьНаСервере('Содержание');";
	Возврат Текст;
КонецФункции
  

Функция КнопкаВойти(Кнопка = Неопределено, Клиент = Неопределено)
	Если Кнопка = Неопределено Тогда
		Кнопка = Компонент.СоздатьЭлемент("КнопкаВойти");
		Кнопка.Вставить("Тип", "Вход");
		Компонент.ДобавитьКласс(Кнопка);
		События.ПриНажатии(Кнопка);
	КонецЕсли; 

	Если Кнопка.Тип = "Выйти" Тогда
		Авторизация.Выход(Клиент);
	КонецЕсли;
	 
	Если Клиент = Неопределено Тогда
		Кнопка.Тип = "Вход";
	ИначеЕсли Клиент.Состояние = "НеАвторизован"
		  ИЛИ Клиент.Состояние = "Авторизован" Тогда 
		Кнопка.Тип = "Вход";
	ИначеЕсли Клиент.Состояние = "Аутентифицирован" Тогда 
		Кнопка.Тип = "Выход";
	КонецЕсли; 
	
	Если Кнопка.Тип = "Вход" Тогда
		             
		Кнопка.Текст = "Вход";
		Кнопка.ПриНажатии = СвойстваКомпонента.Создать("Массив");
		Кнопка.ПриНажатии.Добавить("
			| Реквизиты.МодальноеОкно.Тип = 'Авторизация';
			| ОбновитьНаСервере('МодальноеОкно');");
			
	ИначеЕсли Кнопка.Тип = "Выход" Тогда
		
		Кнопка.Текст = "Выход";
		Кнопка.ПриНажатии = СвойстваКомпонента.Создать("Массив");
		Кнопка.ПриНажатии.Добавить("
			| Реквизиты.КнопкаВойти.Тип = 'Выйти';
			| ОбновитьНаСервере('КнопкаВойти');");
		Кнопка.ПриНажатии.Добавить(СкриптПриИзмененииАвторизации());
	КонецЕсли;
	Возврат Кнопка;	
КонецФункции

Функция МодальноеОкно(Окно = Неопределено)
	Если Окно = Неопределено Тогда
		Окно = Компонент.СоздатьМодальноеОкно("МодальноеОкно");
		Компонент.ДобавитьКласс(Окно);
		
		События.ПослеЗагрузкиКомпонента(Окно, "
			| ПоказатьМодальноеОкно = function(){
			| " + Окно.СкриптПоказать + "
			| };
			| СкрытьМодальноеОкно = function(){
			| " + Окно.СкриптСкрыть + "
			| };");
					
		Окно.Удалить("СкриптСкрыть");
		Окно.Удалить("СкриптПоказать");
	Иначе
		Если Окно.Тип = "Авторизация" Тогда
			Форма = ФормаАвторизации();
			Окно.Тело = Форма;
			
			Форма.События.ПриУспехе.Добавить("СкрытьМодальноеОкно();");
		 	События.ПослеЗагрузкиКомпонента(Форма, "ПоказатьМодальноеОкно();");
		 	
			Окно.Тип = "";
		КонецЕсли; 
	КонецЕсли; 
	Возврат Окно;	
КонецФункции

Функция ФормаАвторизации()
	Форма = Компонент.СоздатьФормуАвторизации("ФормаАвторизации");
	Форма.Путь = "/" + Константы.ИмяСервера.Получить() + "/hs/atp/login";
	Форма.События.ПриУспехе = СвойстваКомпонента.Создать("Массив");
    Форма.События.ПриУспехе.Добавить(СкриптПриИзмененииАвторизации());
	
	Возврат Форма;	
КонецФункции

Функция Содержание(Реквизит = Неопределено, Клиент = Неопределено)
	Имя = "Содержание";
	Если Реквизит = Неопределено Тогда
		Реквизит = Компонент.Создать(Имя);
		Компонент.ЗаполнитьИзТекста(Реквизит, "
			| <div ${Свойства}>
			|   <div class='ui vertical segment grid'>
			|     ${Тело}
			|   </div>
			|   <div class='ui vertical segment centered grid'>
			|     ${Нумерация}
			|   </div>
			| </div>");
		Реквизит.Вставить("Тип", "Товары");
		Реквизит.Вставить("ТекущийТип", "");
		Реквизит.Вставить("Отбор", "");
		Компонент.ДобавитьКласс(Реквизит);
		
		Реквизит.Нумерация = Компонент.СоздатьНумерацию("НумерацияСписков");
		Реквизит.Нумерация.ПриНажатии.Добавить("
			| Реквизиты[Реквизиты." + Имя + ".Тип].Лист = Реквизиты.НумерацияСписков.Лист;
			| ОбновитьНаСервере(Реквизиты." + Имя + ".Тип);");
	КонецЕсли; 		
	Если Клиент <> Неопределено Тогда
		Если Клиент.Состояние = "Аутентифицирован" Тогда
			Если Реквизит.Тип = "Контрагенты" Тогда
	 			Реквизит.Тело = КарточкиКонтрагентов(Реквизит.Тело, Реквизит.ТекущийТип, Реквизит.Отбор);
	            Реквизит.ТекущийТип = "Контрагенты";
			Иначе
				Реквизит.Тело = СписокТоваров(Реквизит.Тело, Реквизит.ТекущийТип, Реквизит.Отбор);	
	            Реквизит.ТекущийТип = "Товары";
    		КонецЕсли; 
			
		Иначе
			Если Реквизит.Тип = "Контрагенты" Тогда
				События.ПослеЗагрузкиКомпонента(Реквизит, СкриптПриИзмененииАвторизации());
			Иначе
				Реквизит.Тело = СписокТоваров(Реквизит.Тело, Реквизит.ТекущийТип, Реквизит.Отбор);	
            	Реквизит.ТекущийТип = "Товары";
			КонецЕсли;
		КонецЕсли;  
    	События.ПослеЗагрузкиКомпонента(Реквизит,"
    		| ОбновитьНумерацияСписков();");
	КонецЕсли; 
	Возврат Реквизит;	
КонецФункции

Функция КарточкиКонтрагентов(Карточки = Неопределено, Тип = Неопределено, Отбор = "")
 	Если Не ЗначениеЗаполнено(Карточки) ИЛИ Тип <> "Контрагенты" Тогда
		Карточки = Компонент.СоздатьКарточки("Контрагенты");
		Компонент.ДобавитьКласс(Карточки);
		Компонент.ДобавитьКласс(Карточки, "link row");
		
		Карточки.Вставить("НаЛисте", 4);
		Карточки.Вставить("Лист", 1);
	КонецЕсли;
	Карточки.Список = СвойстваКомпонента.Создать("Массив");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(Контрагенты.ДоговорПоУмолчанию) КАК Договор,
		|	Контрагенты.ПолноеЮридическоеНаименование КАК ПолноеНаименованние,
		|	Контрагенты.ИНН КАК ИНН,
		|	Контрагенты.ДатаРегистрации КАК ДатаРегистрации,
		|	Контрагенты.Представление КАК Представление,
		|	АВТОНОМЕРЗАПИСИ() КАК Номер,
		|	Контрагенты.Ссылка КАК Ссылка,
		|	ТИПЗНАЧЕНИЯ(Контрагенты.Логотип) = NULL КАК ЕстьКартинка
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.Договор КАК Договор,
		|	ВТ.ПолноеНаименованние КАК ПолноеНаименованние,
		|	ВТ.ИНН КАК ИНН,
		|	ВТ.ДатаРегистрации КАК ДатаРегистрации,
		|	ВТ.Представление КАК Представление,
		|	ВТ.Номер КАК Номер,
		|	ВТ.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(ВТ.ЕстьКартинка, ЛОЖЬ) КАК ЕстьКартинка
		|ИЗ
		|	ВТ КАК ВТ
		|ГДЕ
		|	ВТ.Номер > &НомерНачала
		|	И ВТ.Номер <= &НомерКонца";
	
	Слева = Карточки.НаЛисте * (Карточки.Лист - 1);
	Справа = Слева + Карточки.НаЛисте;
	
	Запрос.УстановитьПараметр("НомерНачала", Слева);
	Запрос.УстановитьПараметр("НомерКонца", Справа);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	ИмяСервера = "/" + Константы.ИмяСервера.Получить() + "/hs/atp/"; 
	Пока Выборка.Следующий() Цикл
		СтрокаИД = Строка(Выборка.Ссылка.УникальныйИдентификатор());
		Ид = "К" + СтрокаИД;
		Карточка = Компонент.СоздатьКарточкуКонтрагента(Ид);
		ЗаполнитьЗначенияСвойств(Карточка, Выборка);
		Карточка.Ид = СтрокаИд;
		Если Выборка.ЕстьКартинка Тогда
			Карточка.Логотип = ИмяСервера + "_" + СтрокаИД;
		Иначе
			Карточка.Логотип = "https://picsum.photos/200/200";
		КонецЕсли; 
		Карточки.Список.Добавить(Карточка); 
	КонецЦикла;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(ВТ.Номер) КАК Всего
	               |ИЗ
	               |	ВТ КАК ВТ";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	События.ПослеЗагрузкиКомпонента(Карточки, "
		| Реквизиты.НумерацияСписков.Листов=" + Окр(Выборка.Всего/Карточки.НаЛисте + 0.499, 0, РежимОкругления.Окр15как20) + ";
		| Реквизиты.НумерацияСписков.Лист=" + Карточки.Лист + ";");

	Возврат Карточки;	
КонецФункции
 
Функция Цена(Цена = 0, Валюта = "ruble")
	Реквизит = Компонент.Создать();
	Компонент.ЗаполнитьИзТекста(Реквизит,"${Цена}<i class='${Валюта} sign icon' />");
	Реквизит.Валюта = Валюта;
	Реквизит.Цена = Цена;	
	Возврат Реквизит;
КонецФункции
 

Функция СписокТоваров(Товары = Неопределено, Тип = Неопределено, Отбор = Неопределено)

	Если Не ЗначениеЗаполнено(Товары) ИЛИ Тип <> "Товары" Тогда
		Товары = Компонент.СоздатьСписок("Товары");
		Компонент.ДобавитьКласс(Товары);
		Компонент.ДобавитьКласс(Товары, "column");
		Компонент.Размеры(Товары, "Ширина16");
		Товары.Вставить("Лист", 1);
		Товары.Вставить("НаЛисте", 5);
		Товары.Вставить("Отбор");
	КонецЕсли;
	Если Отбор <> Неопределено Тогда
		Товары.Отбор = Отбор;
	Иначе
		Отбор = Товары.Отбор;
	КонецЕсли; 

	Товары.СписокЭлементов = СвойстваКомпонента.Создать("Массив");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Текст = 
		"ВЫБРАТЬ
		|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ВТНом
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|ГДЕ
		|	НЕ ЦеныНоменклатуры.Номенклатура.Ссылка ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныНоменклатуры.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АВТОНОМЕРЗАПИСИ() КАК Номер,
		|	ВТНом.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	ВТНом КАК ВТНом
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ВТ.Номер) КАК Всего
		|ИЗ
		|	ВТ КАК ВТ";	
	Если Не ПустаяСтрока(Отбор) Тогда
		ТекстМетки = "ГДЕ
			|";
		ТекстЗамены = "ГДЕ 
			| 	ЦеныНоменклатуры.Номенклатура.Наименование ПОДОБНО &Отбор
			| И
			| ";
	    Текст = СтрЗаменить(Текст, ТекстМетки, ТекстЗамены);
	КонецЕсли; 

	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("Отбор", "%" + Отбор + "%");

	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если ЗначениеЗаполнено(Выборка.Всего) Тогда
		ВсегоЛистов = Окр(Выборка.Всего/Товары.НаЛисте + 0.49999, 0, РежимОкругления.Окр15как20);
	Иначе
		ВсегоЛистов = 1;	
	КонецЕсли;

	Если ВсегоЛистов < Товары.Лист Тогда
		Товары.Лист = ВсегоЛистов;
	КонецЕсли; 
	Слева = Товары.НаЛисте * (Товары.Лист - 1);
	Справа = Слева + Товары.НаЛисте;

	
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПРЕДСТАВЛЕНИЕ(ЦеныНоменклатуры.Номенклатура) КАК Наименование,
	               |	ПРЕДСТАВЛЕНИЕ(ЦеныНоменклатуры.Номенклатура.ВидНоменклатуры) КАК ВидНоменклатуры,
	               |	ПРЕДСТАВЛЕНИЕ(ЦеныНоменклатуры.ВидЦены) КАК ВидЦены,
	               |	ЦеныНоменклатуры.Цена КАК Цена,
	               |	ЦеныНоменклатуры.Номенклатура.Ссылка КАК Ссылка
	               |ИЗ
	               |	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	               |ГДЕ
	               |	ЦеныНоменклатуры.Номенклатура В
	               |			(ВЫБРАТЬ
	               |				ВТ.Номенклатура КАК Номенклатура
	               |			ИЗ
	               |				ВТ КАК ВТ
	               |			ГДЕ
	               |				ВТ.Номер > &НомерНачала
	               |				И ВТ.Номер <= &НомерКонца)
	               |ИТОГИ ПО
	               |	Наименование";

	Запрос.УстановитьПараметр("НомерНачала", Слева);
	Запрос.УстановитьПараметр("НомерКонца", Справа);
		
	Запись = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам,"Наименование");
	
	Пока Запись.Следующий() Цикл
		Элемент = Неопределено;
	    Выборка = Запись.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Элемент = Неопределено Тогда
				СтрокаИД = Строка(Выборка.Ссылка.УникальныйИдентификатор());
				Ид = "Н" + СтрокаИД;
				
				Содержание = Компонент.Создать();
				Компонент.ЗаполнитьИзТекста(Содержание, "
					| ${Картинка}
					| <div class='content'>
					|   <a class='header'>${Наименование}</a>
					|   <div class='meta'>
					|     <span>${ВидНоменклатуры}</span>
					|   </div>
					|   <div class='description'>
					|     <p></p>
					|   </div>
					|   <div class='extra'>
					|     <p>${ВидыЦен}</p>
					|   </div>
					| </div>");
				Картинка = Компонент.СоздатьКартинку();
				Компонент.Размеры(Картинка, "Маленький");
				Картинка.ПутьКДанным = "https://semantic-ui.com/images/wireframe/image.png";
				Содержание.Картинка = Картинка;
				
				ЗаполнитьЗначенияСвойств(Содержание, Выборка);
				Элемент = Компонент.СоздатьЭлемент(Ид, Содержание);
				Элемент.Тег = "div";
				
				Цены = СвойстваКомпонента.Создать("Массив");
				Содержание.ВидыЦен = СвойстваКомпонента.Создать("Массив");
			КонецЕсли;
		
		
			ВидЦены = Компонент.Создать();
			Компонент.ЗаполнитьИзТекста(ВидЦены, "<p class='ui label'>${ВидЦены}&nbsp;${Цена}</p>");
			Компонент.Объединить(ВидЦены, Цена(), "Цена");
			ЗаполнитьЗначенияСвойств(ВидЦены, Выборка);
			Содержание.ВидыЦен.Добавить(ВидЦены);
		КонецЦикла; 
		Товары.СписокЭлементов.Добавить(Элемент);
	КонецЦикла;
	 
	Запрос.МенеджерВременныхТаблиц.Закрыть();

	События.ПослеЗагрузкиКомпонента(Товары, "
		| Реквизиты.НумерацияСписков.Листов=" + ВсегоЛистов + ";
		| Реквизиты.НумерацияСписков.Лист=" + Товары.Лист + ";");

	Возврат Товары;
КонецФункции

//  Пример заполнения реквизита
Функция Реквизит(Реквизит = Неопределено, Клиент = Неопределено)
	Имя = "ИмяРеквизита";
	Если Реквизит = Неопределено Тогда
		//  При создании

		Реквизит = Компонент.Создать(Имя);
		Компонент.ЗаполнитьИзТекста(Реквизит, "<div ${Свойства}>${Значение}</div>");
		Реквизит.Значение = "Значение";
		Компонент.ДобавитьКласс(Реквизит); //  Добавляем в Реквизиты
		//События.ПриСобытии(Реквизит, "ОбновитьНаСервере('" + Имя + "');", "ПриСобытии", "event");
	Иначе
		//  Обновление на сервере
	    Значение = Реквизит.Значение;
	    Реквизит.Значение = Значение;
	КонецЕсли; 
	Возврат Реквизит;	
КонецФункции

 
