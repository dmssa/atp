// Общий модуль разработан для функций, проверяющих различные данные

#Область ПрограммныйИнтерфейс

// Находит число вхождений условия(Параметры.Условие) в справочниках 
//
// Параметры:
//  Параметры    - Структура       - параметры запроса к справочникам
//                                   Параметры.Условие = "Условие"
//                                   [Параметры.Имя] = [Значение]
//  Справочник   - Справочник      - объект, в котором производится поиск
//               - Неопределено    - все справочники
//
// Возвращаемое значение:
//   Число       - Количество вхождений
//
Функция ПараметрыВСправочниках(Параметры, Справочник = Неопределено) Экспорт
#Область НахождениеСправочников
    МассивСправочников = Новый Массив;
    Если Справочник = Неопределено Тогда
        МассивСправочников = Метаданные["Справочники"];
    Иначе
       	МассивСправочников.Добавить(Метаданные.НайтиПоТипу(ТипЗнч(Справочник)));
    КонецЕсли;
#КонецОбласти 
#Область ТекстЗапросаКСправочникам    
    Если МассивСправочников.Количество() = 0 Тогда
    
     	Возврат 0;
    
    КонецЕсли;
    
    ТекстЗапроса = "";
    
    Для Индекс = 0 По МассивСправочников.Количество()-1 Цикл
        Если Индекс <> 0 Тогда
            ТекстЗапроса = ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ ";	
        КонецЕсли; 
        Имя = МассивСправочников[Индекс].Имя;
        ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
                                      //|Первый 1
                                      | 1 
                                      |КАК
                                      | Количество 
                                      |ИЗ
                                      | Справочник." + Имя + "
                                      |КАК 
                                      | " + Имя; 
        Если Параметры.Свойство("Условие")  Тогда
            ТекстЗапроса = ТекстЗапроса + " ГДЕ " + Параметры.Условие;                              
        КонецЕсли; 
    КонецЦикла;
#КонецОбласти 
#Область ТекстЗапросаДляПодсчётаСуммы    
    ТекстЗапроса = "ВЫБРАТЬ
                   | ЕСТЬNULL(СУММА(Количество),0) Как Сумма 
                   |ИЗ
                   | ( " + ТекстЗапроса + " )
                   |КАК
                   | Запрос";
#КонецОбласти 

    Запрос = Новый Запрос(ТекстЗапроса);
    Для каждого Параметр Из Параметры Цикл
        Если Параметр.Ключ<>"Условие" Тогда
            Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
        КонецЕсли; 
    КонецЦикла;
    Выборка = Запрос.Выполнить().Выбрать();
    Выборка.Следующий();
    Возврат Выборка.Сумма;
      
КонецФункции // НаименованиеВСправочнике()
 
// Проверяет существует ли справочник с таким наименованием
//
// Параметры:
//  Объект  - СправочникОбъект - объект справочника для проверки
// 
// Возвращаемое значение:
//   Булево - результат проверки
//
Функция ПроверкаНаНаименование(Объект) Экспорт
    Параметры = Новый Структура();
    Параметры.Вставить("Условие",      "Наименование=&Наименование И Ссылка<>&Ссылка");
    Параметры.Вставить("Наименование", Объект.Наименование);
    Параметры.Вставить("Ссылка",       Объект.Ссылка);
    Отказ = ПараметрыВСправочниках(Параметры, Объект.Родитель)>0;	
    Если Отказ Тогда
    
        Сообщение = Новый СообщениеПользователю;
        Сообщение.Текст = "Такое название уже существует!";
        Сообщение.Поле  = "Наименование";
        Сообщение.УстановитьДанные(Объект);
        Сообщение.Сообщить();

    КонецЕсли; 
    Возврат Отказ;
КонецФункции // ПроверкаНаНаименование()

//  Задаёт значения предопределённых элементов и их реквизиты
Функция ПолучитьПредопределенные(ДляПроверки = Ложь)
	Предопределенные = Новый Массив();
	
	РубВалюта = Новый Структура("Ссылка,Значения");
	РубВалюта.Ссылка   = "Справочники.Валюты.Рубль";
	РубВалюта.Значения = Новый Структура("Код", "810");
	Предопределенные.Добавить(РубВалюта);	
	
	ОснРубСчет = Новый Структура("Ссылка,Значения");
	ОснРубСчет.Ссылка   = "Справочники.СчетаОрганизации.ОсновнойРублевыйСчет";
	ОснРубСчет.Значения = Новый Структура("ВалютаСчета", "Справочники.Валюты.Рубль");
	Предопределенные.Добавить(ОснРубСчет);	
	
	Если Не ДляПроверки Тогда
		ПолучитьПредопределенныеСсылки(Предопределенные);
	КонецЕсли; 
	Возврат Предопределенные;
КонецФункции



 
Процедура ПолучитьПредопределенныеСсылки(Объекты)
	Для каждого Объект Из Объекты Цикл
		Объект.Ссылка = НайтиСсылку(Объект.Ссылка);
		Если ТипЗнч(Объект.Значения) = Тип("Структура") Тогда
			Для каждого КлЗнч Из Объект.Значения Цикл
				Объект.Значения[КлЗнч.Ключ] = НайтиСсылку(КлЗнч.Значение);
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 	
КонецПроцедуры

Процедура ВосстановитьЗначенияПредопределенных() Экспорт
	Предопределенные = ПолучитьПредопределенные(Истина);
	Для каждого Объект Из Предопределенные Цикл
		ВосстановитьСсылку(Объект);
	КонецЦикла; 	
КонецПроцедуры

Функция НайтиСсылку(Путь)
	ПутиКСсылке = СтрРазделить(Путь, ".");
	Если ПутиКСсылке[0] = "Справочники" Тогда
		Попытка
			Ссылка = Справочники[ПутиКСсылке[1]][ПутиКСсылке[2]];
		Исключение
			//  TODO: Сделать поиск по Предопределенным для записи Значения (заполнение предопределенных реквизитов)
			Ссылка = ВосстановитьСсылку(Новый Структура("Ссылка,Значения"
										, Путь
										, Новый Структура()
										));
		КонецПопытки;
	ИначеЕсли ПутиКСсылке[0] = "Константы" Тогда
		Ссылка = Константы[ПутиКСсылке[1]];
	Иначе
		Возврат Путь;
	КонецЕсли; 
	Возврат Ссылка
КонецФункции
 
Функция ВосстановитьСсылку(Объект)
	ПутиКСсылке   = СтрРазделить(Объект.Ссылка, ".");
	ЭтоСправочник = (ПутиКСсылке[0] = "Справочники");
	ЭтоКонстанта  = (ПутиКСсылке[0] = "Константы");

	Если ЭтоКонстанта И ПутиКСсылке.Количество()<2
		ИЛИ ЭтоСправочник И ПутиКСсылке.Количество()<3 Тогда
		
		ВызватьИсключение "Неизвестный ОбъектМетаданных в функции ПроверкиСервер.ВосстановитьСсылку";	
	
	КонецЕсли; 


	Элемент = Неопределено;
	Если ЭтоСправочник Тогда
		Менеджер = Справочники[ПутиКСсылке[1]];
	ИначеЕсли ЭтоКонстанта Тогда
		Элемент = Константы[ПутиКСсылке[1]];
	Иначе
		ВызватьИсключение "ОбъектМетаданных не определён в функции ПроверкиСервер.ВосстановитьСсылку";	
	КонецЕсли;
	Если ЭтоСправочник Тогда
		Имя = ПутиКСсылке[2];
		Попытка
			Элемент = Менеджер[Имя];
		Исключение
		КонецПопытки;  
		Если Не ЗначениеЗаполнено(Элемент) Тогда
			Элемент = Менеджер.СоздатьЭлемент();
			Элемент.ИмяПредопределенныхДанных = Имя;
			Элемент.Наименование = Имя;
			Для каждого КлЗнч Из Объект.Значения Цикл
				Ссылка = Неопределено;
				Попытка
					Ссылка = Элемент[КлЗнч.Ключ].Ссылка;
				Исключение
				КонецПопытки; 
				Если Ссылка <> Неопределено Тогда
					//  TODO: Сделать поиск по Предопределенным для записи Значения (заполнение предопределенных реквизитов)
					ТестовыйОбъект = Новый Структура("Ссылка,Значения", КлЗнч.Значение, Новый Структура());
					Элемент[КлЗнч.Ключ] = ВосстановитьСсылку(ТестовыйОбъект);
				Иначе
					Элемент[КлЗнч.Ключ] = КлЗнч.Значение;
				КонецЕсли; 
			КонецЦикла;
			Попытка
				Элемент.Записать();
				Сообщить("Создана новая запись " + Объект.Ссылка);
			Исключение
			    // ВызватьИсключение(ОписаниеОшибки());
			    Сообщить("Не удалось создать предопределенный элемент " + Объект.Ссылка + "
			    		| Ошибка: " + ОписаниеОшибки());
			КонецПопытки; 
		КонецЕсли;                           
  	ИначеЕсли ЭтоКонстанта Тогда
  		Если Объект.Значения <> Неопределено Тогда
			Элемент.Значение = Объект.Значения;
			Элемент.Записать();
		КонецЕсли; 
	КонецЕсли; 
	Возврат Элемент;
КонецФункции
   

Процедура ЗапретИзмененияПредопределенныхПередЗаписью(Источник, Отказ) Экспорт
	Если ПараметрыСеанса.Инициализация Тогда
		Возврат;
	КонецЕсли; 
	Предопределенные = ПолучитьПредопределенные();
	
	Для каждого Объект Из Предопределенные Цикл
		Если Объект.Ссылка <> Источник.Ссылка Тогда
			Продолжить;
		КонецЕсли; 
		Элемент = Неопределено;
		Для каждого КлЗнч Из Объект.Значения Цикл
			Если Источник[КлЗнч.Ключ] <> КлЗнч.Значение Тогда
				Элемент = КлЗнч.Ключ;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		Если ЗначениеЗаполнено(Элемент) Тогда
			Отказ = Истина;
			Сообщить("Изменение """ + Элемент + """ для " + Источник + " запрещено");
			Возврат;
		КонецЕсли;  
	КонецЦикла; 
КонецПроцедуры

Процедура ЗапретУдаленияПредопределенныхПередУдалением(Источник, Отказ) Экспорт
	Если ПараметрыСеанса.Инициализация Тогда
		Возврат;
	КонецЕсли; 
	Предопределенные = ПолучитьПредопределенные();
	
	Для каждого Объект Из Предопределенные Цикл
		Если Источник.Ссылка = Объект.Ссылка Тогда
			Отказ = Истина;
			Сообщить("Удаление " + Источник + " запрещено");
			Возврат;
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры
 
#КонецОбласти