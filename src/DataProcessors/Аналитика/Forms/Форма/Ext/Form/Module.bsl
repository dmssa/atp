&НаКлиенте
Перем Настройки;
//Док  = Элементы.HTML.document;
//Винд = Док.defaultView.window;

&НаКлиенте
Функция Страница_СоздатьЭлемент(Тэг = "div", Родитель = Неопределено)
    Док = Элементы.HTML.document;
    Если Родитель = Неопределено Тогда
        Родитель = Док.body;
    ИначеЕсли ТипЗнч(Родитель) = Тип("Строка") Тогда
        Если Родитель = "body" Тогда
            Родитель = Док.body;
        ИначеЕсли Родитель = "head" Тогда
            Родитель = Док.head;
        Иначе
            Родитель = Док.getElementById(Родитель);
        КонецЕсли;  
    КонецЕсли; 
    HTMLЭлемент = Родитель.appendChild(Док.createElement(Тэг));
    Возврат HTMLЭлемент;
КонецФункции

&НаКлиенте
Функция Страница_НайтиЭлемент(Ид)
    Док = Элементы.HTML.document;
    Возврат Док.getElementById(Ид);
КонецФункции

&НаКлиенте
Функция Страница_ТекстВнутри(HTMLЭлемент, Текст)
    HTMLЭлемент.innerHTML = Текст;
    Возврат HTMLЭлемент;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция УголВРадианы(Угол)
	Возврат 3.1415926 * Угол / 180;
КонецФункции // УголВРадианы()
 
&НаСервереБезКонтекста
Функция ЗапросНаСервере(ТекстЗапроса, ПараметрыЗапроса, МассивНазваний)
    Запрос = Новый Запрос();
    Запрос.Текст = ТекстЗапроса;
    Для каждого КлЗнч Из ПараметрыЗапроса Цикл
    	Запрос.УстановитьПараметр(КлЗнч.Ключ, КлЗнч.Значение);
    КонецЦикла; 
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    Результат = Новый Массив();
    
    Ключи = "Ключ,Значение";
    //Парам = Новый Структура(Ключи,"Номенклатура","КоличествоОстаток");
    
    Парам = Новый Структура(Ключи, МассивНазваний[0], МассивНазваний[1]);
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        Результат.Добавить(Новый Структура(Ключи, ВыборкаДетальныеЗаписи[Парам.Ключ], ВыборкаДетальныеЗаписи[Парам.Значение]));
    КонецЦикла;
    Возврат Результат;
КонецФункции // ЗапросНаСервере()

//  Формирование настроек графиков
&НаКлиенте
Процедура HTMLДокументСформирован(Элемент)
    Настройка = НастройкаПоУмолчанию();
    Настройка.Заголовок = "Товары на складах";
    Настройка.Ширина    = "33%";
    Настройка.Высота    = "50%";
    Настройка.ТеньХ     = "-5";
    Настройка.АнимацияЗагрузки = 1;
    Настройка.МассивНазваний.Добавить("Номенклатура");
    Настройка.МассивНазваний.Добавить("КоличествоОстаток");
    Настройка.ТекстЗапроса = "ВЫБРАТЬ
                             |  ""Всего"" КАК Номенклатура,
                             |  ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток
                             |ИЗ
                             |  РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки
                             |
                             |ОБЪЕДИНИТЬ ВСЕ
                             |
                             |ВЫБРАТЬ
                             |  ТоварыНаСкладахОстатки.Номенклатура,
                             |  ТоварыНаСкладахОстатки.КоличествоОстаток
                             |ИЗ
                             |  РегистрНакопления.ТоварыНаСкладах.Остатки КАК ТоварыНаСкладахОстатки";    
    Ид = "pie_" + (Настройки.Количество()+1);
    Настройки.Вставить(Ид,Настройка);
    
    
    
    Настройка = НастройкаПоУмолчанию();
    Настройка.Заголовок = "Топ 5 поставщиков";
    Настройка.Х = "33%";
    Настройка.Ширина = "33%";
    Настройка.Высота = "50%";
    Настройка.ТеньХ = "0";
    Настройка.Заполнение = 100;
    Настройка.Угол = 180;
    Настройка.АнимацияЗагрузки = 3;
    Настройка.МассивНазваний.Добавить("Поставщик");
    Настройка.МассивНазваний.Добавить("СтоимостьОборот");
    Настройка.ТекстЗапроса = "ВЫБРАТЬ
                             |  ""Всего"" КАК Поставщик,
                             |  ОбъемыЗакупокОбороты.СтоимостьОборот КАК СтоимостьОборот
                             |ИЗ
                             |  РегистрНакопления.ОбъемыЗакупок.Обороты КАК ОбъемыЗакупокОбороты
                             | 
                             |ОБЪЕДИНИТЬ ВСЕ
                             |
                             |ВЫБРАТЬ ПЕРВЫЕ 5
                             |  ОбъемыЗакупокОбороты.Поставщик,
                             |  ОбъемыЗакупокОбороты.СтоимостьОборот
                             |ИЗ
                             |  РегистрНакопления.ОбъемыЗакупок.Обороты КАК ОбъемыЗакупокОбороты
                             |
                             |УПОРЯДОЧИТЬ ПО
                             |  ОбъемыЗакупокОбороты.СтоимостьОборот УБЫВ";
    Ид = "pie_" + (Настройки.Количество()+1);
    Настройки.Вставить(Ид,Настройка);
    
    
    
    Настройка = НастройкаПоУмолчанию();
    Настройка.Заголовок = "10 самых покупаемых товаров за этот месяц";
    Настройка.Х = "66%";
    Настройка.Ширина = "33%";
    Настройка.Высота = "50%";
    Настройка.Заполнение = 20;
    Настройка.АнимацияЗагрузки = 2;
    Настройка.МассивНазваний.Добавить("Номенклатура");
    Настройка.МассивНазваний.Добавить("КоличествоОборот");
    Настройка.ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 10
                             |  ОбъёмыПродажОбороты.Номенклатура КАК Номенклатура,
                             |  СУММА(ОбъёмыПродажОбороты.КоличествоОборот) КАК КоличествоОборот
                             |ПОМЕСТИТЬ Первые10ПоПродажам
                             |ИЗ
                             |  РегистрНакопления.ОбъёмыПродаж.Обороты(&ДатаНачала, , Месяц, ) КАК ОбъёмыПродажОбороты
                             |
                             |СГРУППИРОВАТЬ ПО
                             |  ОбъёмыПродажОбороты.Номенклатура
                             |
                             |УПОРЯДОЧИТЬ ПО
                             |  КоличествоОборот УБЫВ
                             |;
                             |
                             |////////////////////////////////////////////////////////////////////////////////
                             |ВЫБРАТЬ
                             |  ""Всего"" КАК Номенклатура,
                             |  СУММА(Первые10ПоПродажам.КоличествоОборот) КАК КоличествоОборот
                             |ИЗ
                             |  Первые10ПоПродажам КАК Первые10ПоПродажам
                             |
                             |ОБЪЕДИНИТЬ ВСЕ
                             |
                             |ВЫБРАТЬ
                             |  Первые10ПоПродажам.Номенклатура,
                             |  Первые10ПоПродажам.КоличествоОборот
                             |ИЗ
                             |  Первые10ПоПродажам КАК Первые10ПоПродажам";
                             
    Настройка.ПараметрыЗапроса.Вставить("ДатаНачала", НачалоМесяца(ТекущаяДата()));
    Ид = "pie_" + (Настройки.Количество()+1);
    Настройки.Вставить(Ид,Настройка);
    
    Страница_Обновить(Истина);
КонецПроцедуры

&НаКлиенте
Функция НастройкаПоУмолчанию()
    Возврат Новый Структура("   Х,    У,Ширина,Высота,Заголовок,ТеньХ,ТеньУ,Размытие,ЦветТени,Заполнение,Угол,СдвигМышью,АнимацияЗагрузки,Цвета         ,МассивНазваний,ПараметрыЗапроса ,ТекстЗапроса,Данные",
                             "0%", "0%",  "0%",  "0%",       "",    5,    5,       4,  "#000",        50,  90,        10,               2,Новый Массив(),Новый Массив(),Новый Структура());    
КонецФункции

// Преобразует значение в строку обозначающую размер в пикселях или процентах
//
// Параметры:
//  Значение - Строка,Число - значение для преобразования
// 
// Возвращаемое значение:
//  Строка - координата/размер для HTML
//
&НаКлиенте
Функция ВПх(Значение)
	Если СтрЗаканчиваетсяНа(Значение,"%") Тогда
    	Возврат Значение;
    КонецЕсли; 
 	Если СтрЗаканчиваетсяНа(Значение,"px") Тогда
    	Возврат Значение;
    КонецЕсли; 
    Возврат Значение + "px";    
КонецФункции

// Создаёт строку из значения, округляя до десятых с разделителем "."
//
// Параметры:
//  Значение - Число - значение для преобразования
// 
// Возвращаемое значение:
//  Строка - результат приведения
//
&НаКлиенте            
Функция ВСтр(Значение)
//    Возврат СтрЗаменить(Окр(Значение,1),",",".");	
    Возврат Формат(Значение, "ЧДЦ=1; ЧРД=.; ЧН=0; ЧГ=0");
КонецФункции
 
&НаКлиенте
Процедура Страница_НарисоватьДиаграмму(Ид, Прм, ОбновитьВсё=Истина)
    ЭлементСтраницы = Страница_НайтиЭлемент(Ид);
    Если ЭлементСтраницы = Неопределено Тогда
        Прм.АнимацияЗагрузки = Число(Прм.АнимацияЗагрузки);
        
        ЭлементСтраницы = Страница_СоздатьЭлемент();
        ЭлементСтраницы.id = Ид;
        Заглавие     = Страница_СоздатьЭлемент("div", ЭлементСтраницы);
        Заглавие.id  = "header_" + Ид;
        Заглавие.className = "text";
        Диаграмма    = Страница_СоздатьЭлемент("div", ЭлементСтраницы);
        Диаграмма.id = "body_" + Ид;
        Легенда      = Страница_СоздатьЭлемент("div", ЭлементСтраницы);
        Легенда.id   = "legend_" + Ид;
        СтильЛегенды = Страница_СоздатьЭлемент("style","head");
        СтильЛегенды.id = "style_legend_" + Ид;

        Заглавие.style  = "width:100%;"
                        + "height:20px;";
        Легенда.style = "width:100%;"
                      + "display:flex;"
                      + "flex-wrap:wrap;"
                      + "justify-content: flex-start;";
        Страница_ТекстВнутри(СтильЛегенды,".color-box{width:10px;height:10px;border:black 1px solid;display:inline-block;}");
    Иначе
        Заглавие     = Страница_НайтиЭлемент("header_"       + Ид);
        Диаграмма    = Страница_НайтиЭлемент("body_"         + Ид);
        Легенда      = Страница_НайтиЭлемент("legend_"       + Ид);
        СтильЛегенды = Страница_НайтиЭлемент("style_legend_" + Ид);
    КонецЕсли;
#Область ОпределениеСтилейЭлемента
    СтильТекста = Страница_НайтиЭлемент("style_text");
    Если СтильТекста = Неопределено Тогда
        СтильТекста = Страница_СоздатьЭлемент("style","head"); 
        СтильТекста.id = "style_text";
        Страница_ТекстВнутри(СтильТекста, ".text{"
                        + "overflow: hidden;"
                        + "text-align: center;"
                        + "text-overflow: ellipsis;"
                        + "white-space: nowrap;"
                        + "font-family: Arial, Helvetica, sans-serif;"
                        + "font-size: 14px;}");
    КонецЕсли;
    
    ЭлементСтраницы.style = "position:absolute;"
                          + "overflow:hidden;"
                        //  + "border: solid 1px black;"
                          + "width:"  + ВПх(Прм.Ширина)+";"
                          + "height:" + ВПх(Прм.Высота)+";"
                          + "left:"   + ВПх(Прм.Х)+";"
                          + "top:"    + ВПх(Прм.У)+";"; 

#КонецОбласти

    Всего = -1;
    Если ОбновитьВсё Тогда
        Страница_ТекстВнутри(Заглавие, Прм.Заголовок);
        Заглавие.title = Прм.Заголовок; 
        Прм.Данные     = ЗапросНаСервере(Прм.ТекстЗапроса, Прм.ПараметрыЗапроса, Прм.МассивНазваний);
        ГСЧ      = Новый ГенераторСлучайныхЧисел;
        Описание = "";
        Сч       = 0;
    КонецЕсли;
    Для каждого Выборка Из Прм.Данные Цикл
        Если Не ОбновитьВсё Тогда
            Если Выборка.Ключ = "Всего" Тогда
                Всего = Выборка.Значение;
                Прервать;
            КонецЕсли;
            Продолжить;
        КонецЕсли;
        Если Выборка.Ключ = "Всего" Тогда
            Всего = Выборка.Значение;
        Иначе
            Если Сч >= Прм.Цвета.Количество() Тогда
                Прм.Цвета.Добавить("rgb(" + ГСЧ.СлучайноеЧисло(128, 255) + ","
                                          + ГСЧ.СлучайноеЧисло(128, 255) + ","
                                          + ГСЧ.СлучайноеЧисло(128, 255) + ")");
            КонецЕсли; 
            Описание = Описание + "<div class='text' title='" + Выборка.Ключ + "'>"
                                + "<div class='color-box' style='margin-left:10px;background-color:" + Прм.Цвета[Сч] + ";'></div>"
                                + Выборка.Ключ
                                + "</div>";
            Сч = Сч + 1; 
        КонецЕсли; 
    КонецЦикла;

    Если ОбновитьВсё Тогда
        Страница_ТекстВнутри(Легенда, Описание);
    КонецЕсли; 
    Диаграмма.style = "width:100%;"
                    + "height:calc(100% - " + Заглавие.offsetHeight + "px - " + Легенда.offsetHeight + "px);";

    Шир = Диаграмма.offsetWidth;
    Выс = Диаграмма.offsetHeight;
    Построение = Новый Структура("Угол0,   Угол1,Угол2,Радиус,Х0,У0,Х1,У1,Х2,У2,ЦХ,ЦУ",
                                  Прм.Угол);
    Радиус = (1 - Прм.СдвигМышью / 100) * Мин(Шир,Выс) / 2;
    Построение.Радиус = Радиус * (1 - 0.5 * Прм.Заполнение / 100);
    Заполнение = 2 * (Радиус - Построение.Радиус);
    
    Построение.ЦХ = Шир / 2;
    Построение.ЦУ = Выс / 2;

    ВРадианах = УголВРадианы(Построение.Угол0);
    Построение.Х0 = Построение.ЦХ + Построение.Радиус * sin(ВРадианах);
    Построение.У0 = Построение.ЦУ + Построение.Радиус * cos(ВРадианах);
        
    Фигуры   = "";
    Сч = 0;
    Если ОбновитьВсё Тогда
        НачальноеЗаполнение = ?(ПобитовоеИ(Прм.АнимацияЗагрузки, 2) > 0, 0, Заполнение);
    Иначе
        НачальноеЗаполнение = Заполнение;	
    КонецЕсли; 
    
    Для каждого Выборка Из Прм.Данные Цикл
        Если Выборка.Ключ <> "Всего" Тогда
            Т        = ПосчитатьТочки(Построение, Выборка.Значение, Всего);
             
            Фигуры   = Фигуры + "<path id='" + Выборка.Ключ + "' d='" + Т.Текст + "' " 
                              + "stroke-width='" + ВСтр(НачальноеЗаполнение) + "' "
                              + "stroke='" + Прм.Цвета[Сч] + "' "
                              + "fill='rgba(0,0,0,0)'>";
            Фигуры  = Фигуры + "<title>" + Выборка.Ключ + "(" + Выборка.Значение + ")" + "</title>";
            #Область Анимация
            Вектор = ВСтр((Т.Построение.Х1 - Построение.ЦХ) * Прм.СдвигМышью/100) + ", " 
                   + ВСтр((Т.Построение.У1 - Построение.ЦУ) * Прм.СдвигМышью/100);
            Фигуры  = Фигуры + АнимацияМыши(500, 5, Вектор, 0);
            Фигуры  = Фигуры + АнимацияМыши(500, 5, Вектор, 1);
            Если ОбновитьВсё Тогда
                Фигуры  = Фигуры + АнимацияЗагрузки(900, 
                                                    Прм.АнимацияЗагрузки, 
                                                    УголВРадианы(Т.Построение.Угол2 - Т.Построение.Угол0) * Т.Построение.Радиус, 
                                                    Заполнение);
            КонецЕсли;
            #КонецОбласти 
            Фигуры  = Фигуры + "</path>";
            Построение.Х0    = Т.Построение.Х2;
            Построение.У0    = Т.Построение.У2;
            Построение.Угол0 = Т.Построение.Угол2;
            Сч = Сч + 1; 
        КонецЕсли; 
    КонецЦикла;
    
#Область ОпределениеСтилейSVG
    Тень     =  "-webkit-filter:drop-shadow( " + Прм.ТеньХ + "px " + Прм.ТеньУ + "px " + Прм.Размытие + "px " + Прм.ЦветТени + ")";
    Стиль    = "<style>#svg_" + Ид + "{" + Тень + ";}</style>";
#КонецОбласти      

    Картинка = "<div style='width:100%'><svg width='100%' height='100%' viewBox='0 0 " + Шир + " " + Выс + "' id='svg_" + Ид + "'>" 
             + Стиль 
             + Фигуры 
             + "</svg></div>";

    Страница_ТекстВнутри(Диаграмма, Картинка); 
КонецПроцедуры
 
&НаКлиенте
Функция АнимацияМыши(Длительность, Процент, Вектор, Событие)
    Возврат "<animateTransform restart='always' "
                            + "fill='freeze' "
                            + "begin='" + ?(Событие = 0, "mouseenter", "mouseleave") + "+0.1s' "
                            + "dur='"+Длительность+"ms' "
                            + "attributeName='transform' "
                            + "type='translate' "
                            + "values='" + ?(Событие = 0, "0, 0;" + Вектор, Вектор + ";0, 0") + "' />";
КонецФункции 

&НаКлиенте
Функция АнимацияЗагрузки(Длительность, Событие, ДлинаДуги, Заполнение)
    Текст = "";
    Если ПобитовоеИ(Событие,1)>0 Тогда
        Дл = Новый Структура("_05,_10,_45,_50,_90,_100");
        Дл._05 = ВСтр(0.05 * ДлинаДуги);
        Дл._10 = ВСтр(0.1  * ДлинаДуги);
        Дл._45 = ВСтр(0.45 * ДлинаДуги);
        Дл._50 = ВСтр(0.5  * ДлинаДуги);
        Дл._90 = ВСтр(0.9  * ДлинаДуги);
        Дл._100 = ВСтр(      ДлинаДуги);
        
        Текст = Текст + "<animate dur='"+Длительность+"ms' "
                      + "attributeName='stroke-dasharray' "
                      //  Значения для dasharray
                      //  Заполнение,       Пустота,     Заполнение,       Пустота;
                      + "values='  0," + Дл._50 + ",        1      ," + Дл._50 + ";"
                                + "0," + Дл._45 + ", " + Дл._10 + "," + Дл._45 + ";"
                                + "0,           0  ," + Дл._100 + ",             0;"
                                + "0," + Дл._05 + ", " + Дл._90 + "," + Дл._05 + ";"
                                + "0,           0  ," + Дл._100 + ",             0' />";
    КонецЕсли;  
    Если ПобитовоеИ(Событие,2)>0 Тогда
        Текст = Текст + "<animate dur='" + Длительность + "ms' "
                               + "attributeName='stroke-width' "
                               + "fill='freeze' "
                               + "values='0;1;" + ВСтр(0.1 * Заполнение) + ";" + ВСтр(Заполнение) + "' />";
    КонецЕсли; 
    Возврат Текст;                            
КонецФункции 
                             
&НаКлиенте
Функция ПосчитатьТочки(Построение, Количество, Всего)
	Результат = Новый Структура("Построение,Текст", Построение, "");

    Альфа = 360 * Количество/Всего;
    Построение.Угол1 = Построение.Угол0 + Альфа/2;
    Построение.Угол2 = Построение.Угол0 + Альфа; 

    ВРадианах = УголВРадианы(Построение.Угол1);
    Построение.Х1 = Построение.ЦХ + Построение.Радиус*sin(ВРадианах);
    Построение.У1 = Построение.ЦУ + Построение.Радиус*cos(ВРадианах);

    ВРадианах = УголВРадианы(Построение.Угол2);
    Построение.Х2 = Построение.ЦХ + Построение.Радиус*sin(ВРадианах);
    Построение.У2 = Построение.ЦУ + Построение.Радиус*cos(ВРадианах);

    Результат.Текст = "M "      + ВСтр(Построение.Х0)     + "," + ВСтр(Построение.У0)
                    + " A"      + ВСтр(Построение.Радиус) + "," + ВСтр(Построение.Радиус)
                    + " 0 0,0 " + ВСтр(Построение.Х1)     + "," + ВСтр(Построение.У1)
                    + " A"      + ВСтр(Построение.Радиус) + "," + ВСтр(Построение.Радиус)
                    + " 0 0,0 " + ВСтр(Построение.Х2)     + "," + ВСтр(Построение.У2);
    
    Возврат Результат;
КонецФункции // ПосчитатьТочки()
 
&НаКлиенте
Процедура ПриОткрытии(Отказ)
    HTML = "<html><head><script>var timer;function call1c(d){"
         +  "let e=document.createEvent('MouseEvents');"
         +  "e.dataTransfer=d;"
         +  "e.initMouseEvent('click',true,true);"
         +  "document.dispatchEvent(e)"
         + "} window.onload=function(){"
         +  "window.addEventListener('resize',function(){"
         +      "if(!!timer)clearTimeout(timer);"
         +      "timer=setTimeout(function(){call1c('resize')},500)"
         +  "})"
         + "}</script></head><body style='width:100%;height:100%;margin:0;padding:0;overflow:hidden;'></body></html>";
КонецПроцедуры

&НаКлиенте
Процедура Страница_Обновить(Команда)
    ОбновитьВсё = ?(Команда = Ложь, Ложь, Истина);
    Для каждого КлЗнч Из Настройки Цикл
        Страница_НарисоватьДиаграмму(КлЗнч.Ключ, КлЗнч.Значение, ОбновитьВсё);
    КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура HTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
    Если ДанныеСобытия.Event.detail=0 Тогда
        Страница_Обновить(Ложь);
    ИначеЕсли ДанныеСобытия.Event.which=1 Тогда
        Родитель = ДанныеСобытия.Element;
        Индекс = 0;
        Пока Индекс = 0 И Родитель.tagName <> "BODY" Цикл
        	Родитель = Родитель.parentNode;
            Индекс   = СтрНайти(Родитель.id, "_pie_");
        КонецЦикла; 
        Если Индекс = 0 Тогда
        	Возврат;
        КонецЕсли; 
        Ид = Прав( Родитель.id, СтрДлина(Родитель.id)-Индекс);
        Данные = Настройки[Ид].Данные;
        Для каждого КлЗнч Из Данные Цикл
            Если Строка(КлЗнч.Ключ) = ДанныеСобытия.Element.id Тогда
                    ПоказатьЗначение(,КлЗнч.Ключ);
            	Возврат;
            КонецЕсли;  
        КонецЦикла;  
    КонецЕсли;
     
КонецПроцедуры


Настройки = Новый Структура;
