// OpenOffice
// http://www.openoffice.org/api/basic/man/tutorial/tutorial.pdf
// https://wiki.openoffice.org/w/images/d/d9/DevelopersGuide_OOo3.1.0.pdf
// 
// Excel
// https://docs.microsoft.com/en-us/office/vba/api/overview/excel
//  

#Область ДополнительныеФункции
// Для преобразования имени файла при обращении к OpenOffice/LibreOffice
&НаСервереБезКонтекста
Функция OOFileToURL(ИмяФайла)
    Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
    	Возврат Неопределено;
    КонецЕсли; 
    ИмяФайла = СтрЗаменить(ИмяФайла," ","%20" );
    ИмяФайла = СтрЗаменить(ИмяФайла,"\","/");
    Возврат "file://" + "localhost" + "/" + ИмяФайла;
КонецФункции

&НаСервереБезКонтекста
Функция ООПолучитьСОМОбъект(ТабличныйМодуль, Путь)
    Возврат ТабличныйМодуль.КОМОбъект.Bridge_GetStruct(Путь);
КонецФункции
&НаСервереБезКонтекста
Функция ООПолучитьСОМКласс(ТабличныйМодуль, Путь)
    Образ = ТабличныйМодуль.КОМОбъект.createInstance("com.sun.star.reflection.CoreReflection");
    Возврат Образ.forName(Путь);
КонецФункции
&НаСервереБезКонтекста
Функция ООСоздатьСОМОбъект(ТабличныйМодуль, Путь, Переменная = Неопределено)
    Класс = ООПолучитьСОМКласс(ТабличныйМодуль, Путь);
    Класс.createObject(Переменная);
    Возврат Переменная;
КонецФункции

// Для создания параметров функций OpenOffice
&НаСервереБезКонтекста
Функция ООСоздатьПараметры(ТабличныйМодуль, СтруктураПараметры)
	Script     = Новый ComОбъект("MSScriptControl.ScriptControl");
    Script.language = "javascript";
    Script.eval("args=[];");
    Индекс = 0;
    Для каждого Параметр Из СтруктураПараметры Цикл
        Свойство = ООПолучитьСОМОбъект(ТабличныйМодуль, "com.sun.star.beans.PropertyValue");
        Свойство.Name  = Параметр.Ключ;
        Свойство.Value = Параметр.Значение;
        Script.AddObject("args[" + Индекс + "]", Свойство);
        Индекс = Индекс + 1;
    КонецЦикла; 
    Возврат Script.eval("args");
КонецФункции // ООСоздатьПараметры()

#КонецОбласти 
 
#Область ФайлДокумента
	
&НаСервереБезКонтекста
Функция ОткрытьДокумент(ПутьКФайлу);
    ТабличныйМодуль = ОткрытьCalcДокумент(ПутьКФайлу);
    Если ТабличныйМодуль = Неопределено Тогда
        ТабличныйМодуль = ОткрытьExcelДокумент(ПутьКФайлу);
    КонецЕсли;
    Если ТабличныйМодуль = Неопределено Тогда
        Сообщить("Не удалость открыть внешний файл", СтатусСообщения.Важное);
    Иначе
        Если ТабличныйМодуль.Тип = "Excel" Тогда
            #Область ПеречисленияДляФункцийExcel
            
            ТипыЯчеек = Новый Структура();
            ТипыЯчеек.Вставить("Пустая",   0 );
            ТипыЯчеек.Вставить("Значение", 1  );
            ТипыЯчеек.Вставить("Текст",    2  );
            ТипыЯчеек.Вставить("Формула",  3  );
            ТабличныйМодуль.Вставить("ТипыЯчеек", ТипыЯчеек);
            
            ВесШрифта = Новый Структура();
            ВесШрифта.Вставить("Лёгкий",       Ложь);             
            ВесШрифта.Вставить("Нормальный",   Ложь);    
            ВесШрифта.Вставить("Толстый",      Истина);
            ВесШрифта.Вставить("ОченьТолстый", Истина);
            ТабличныйМодуль.Вставить("ВесШрифта", ВесШрифта);

            Выравнивание = Новый Структура();
            Выравнивание.Вставить("Слева",     "Right");
            Выравнивание.Вставить("Справа",    "Left");
            Выравнивание.Вставить("ПоЦентру",  "Center");
            ТабличныйМодуль.Вставить("Выравнивание", Выравнивание);
            
            Ориентация = Новый Структура();
            Ориентация.Вставить("Столбцы", 0);
            Ориентация.Вставить("Строки",  1); 
            ТабличныйМодуль.Вставить("Ориентация", Ориентация);
            
            #КонецОбласти
        ИначеЕсли ТабличныйМодуль.Тип = "OpenOffice" Тогда
            #Область ПеречисленияДляФункцийОО
            //  http://www.openoffice.org/api/docs/common/ref/com/sun/star/table/CellContentType.html
            ТипыЯчеек = Новый Структура();
            ТипыЯчеек.Вставить("Пустая",   0  );
            ТипыЯчеек.Вставить("Значение", 1  );
            ТипыЯчеек.Вставить("Текст",    2  );
            ТипыЯчеек.Вставить("Формула",  3  );
            ТабличныйМодуль.Вставить("ТипыЯчеек", ТипыЯчеек);
            
            //  https://www.openoffice.org/api/docs/common/ref/com/sun/star/awt/FontWeight.html
            ВесШрифта = Новый Структура();
            ВесШрифта.Вставить("Лёгкий",        75.000000);             
            ВесШрифта.Вставить("Нормальный",   100.000000);    
            ВесШрифта.Вставить("Толстый",      150.000000);
            ВесШрифта.Вставить("ОченьТолстый", 175.000000);
            ТабличныйМодуль.Вставить("ВесШрифта", ВесШрифта);

            //  https://www.openoffice.org/api/docs/common/ref/com/sun/star/style/ParagraphAdjust.html
            Выравнивание = Новый Структура();
            Выравнивание.Вставить("Слева",     0);
            Выравнивание.Вставить("Справа",    1);
            Выравнивание.Вставить("ПоЦентру",  3);
            ТабличныйМодуль.Вставить("Выравнивание", Выравнивание);
            
            //  https://www.openoffice.org/api/docs/common/ref/com/sun/star/table/TableOrientation.html
            Ориентация = Новый Структура();
            Ориентация.Вставить("Столбцы", 0);
            Ориентация.Вставить("Строки",  1); 
            ТабличныйМодуль.Вставить("Ориентация", Ориентация);
            
            #КонецОбласти
        КонецЕсли; 	
    КонецЕсли;
    Возврат ТабличныйМодуль;
КонецФункции
    
&НаСервереБезКонтекста
Функция ОткрытьExcelДокумент(ПутьКФайлу)
    ТабличныйМодуль = Новый Структура(); 
	Попытка
    
    	ExcelApplication = Новый COMОбъект("Excel.Application");
        ExcelApplication.Visible        = Истина;
        Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
            ExcelApplication.Workbooks.Open = ПутьКФайлу;
        Иначе
            ExcelApplication.Workbooks.Add();
        КонецЕсли;
        ExcelApplication.DisplayAlerts  = Ложь;
        
        ТабличныйМодуль.Вставить("Тип",       "Excel"         );
        ТабличныйМодуль.Вставить("КОМОбъект", ExcelApplication);
        ТабличныйМодуль.Вставить("Документ",  ExcelApplication.ActiveWorkbook);
        ТабличныйМодуль.Вставить("Путь",      ПутьКФайлу  );
    Исключение
        Возврат Неопределено;
    КонецПопытки; 
    Возврат ТабличныйМодуль;
КонецФункции // ОткрытьExcelДокумент()

&НаСервереБезКонтекста
Функция ОткрытьCalcДокумент(ПутьКФайлу)
    ТабличныйМодуль = Новый Структура();
    ТабличныйМодуль.Вставить("Тип",       "OpenOffice");
    ТабличныйМодуль.Вставить("Путь",      ПутьКФайлу  );
    Попытка
        
    	OpenOffice = Новый COMОбъект("com.sun.star.ServiceManager");
        ТабличныйМодуль.Вставить("КОМОбъект", OpenOffice  );
        
        //  https://www.openoffice.org/api/docs/common/ref/com/sun/star/frame/Desktop.html
        Desktop    = OpenOffice.CreateInstance("com.sun.star.frame.Desktop");             
        ТабличныйМодуль.Вставить("Приложение", Desktop     );
        
        #Область ПараметрыДокумента 
        
        // https://www.openoffice.org/api/docs/common/ref/com/sun/star/document/MediaDescriptor.html
        ПараметрыДокумента = Новый Структура();
        ПараметрыДокумента.Вставить("Hidden", Ложь);
        
        Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
            URL = OOFileToURL(ПутьКФайлу);
            ПараметрыДокумента.Вставить("URL",    URL);
        КонецЕсли; 
        ТабличныйМодуль.Вставить("URL", URL);
        
        Параметры = ООСоздатьПараметры(ТабличныйМодуль, ПараметрыДокумента);	
        
        #КонецОбласти 
        
        Файл   = Новый Файл(ПутьКФайлу); 
	    Если Файл.Существует() Тогда
            //  Существующий документ
            Doc = Desktop.loadComponentFromURL(URL,                     "_blank", 0, Параметры);
        Иначе
            //  Новый пустой документ
            Doc = Desktop.loadComponentFromURL("private:factory/scalc", "_blank", 0, Параметры);
        КонецЕсли; 
        
        //Doc.lockControllers();
        //Doc.addActionLock();
        
        ТабличныйМодуль.Вставить("Документ", Doc);
        
        //  Сохранение пустого файла, если указан путь и его нет
        Если ЗначениеЗаполнено(ПутьКФайлу) И Не Файл.Существует() Тогда
            Сохранить(ТабличныйМодуль, Истина);
        КонецЕсли;
    Исключение
        Возврат Неопределено;
    КонецПопытки; 
    Возврат ТабличныйМодуль;
КонецФункции // ОткрытьCalcДокумент()


&НаСервереБезКонтекста
Процедура ЗакрытьДокумент(ТабличныйМодуль, Сохранить = Истина)
	Если ТабличныйМодуль.Тип = "Excel" Тогда
        ТабличныйМодуль.КОМОбъект.ActiveWorkbook.Close(Сохранить);
        ТабличныйМодуль.КОМОбъект.Application.Quit();
    ИначеЕсли ТабличныйМодуль.Тип = "OpenOffice" Тогда
        ТабличныйМодуль.Документ.close(Сохранить);
        ТабличныйМодуль.Приложение.terminate();
    КонецЕсли; 	
КонецПроцедуры // ЗакрытьДокумент()
  

&НаСервереБезКонтекста
Функция Сохранить(ТабличныйМодуль, Принудительно = Ложь)
    Если ТабличныйМодуль.Тип = "Excel" Тогда
    
        ТабличныйМодуль.Документ.Save();
        Возврат Истина;
        
    ИначеЕсли ТабличныйМодуль.Тип = "OpenOffice" Тогда
        Если ТабличныйМодуль.Документ.isModified() ИЛИ Принудительно Тогда
            Если (ТабличныйМодуль.Документ.hasLocation() И (Не ТабличныйМодуль.Документ.isReadOnly())) Тогда
                ТабличныйМодуль.Документ.store()
            Иначе
                ПараметрыФайла = ООСоздатьПараметры(ТабличныйМодуль, Новый Структура("Overwrite","False"));
                ТабличныйМодуль.Документ.storeAsURL(ТабличныйМодуль.URL, ПараметрыФайла);
            КонецЕсли;
            
            Возврат Истина;
            
        КонецЕсли;
        
        Возврат Ложь;
        
    КонецЕсли;
                   
    Возврат Неопределено; //  Неизвестный тип табличного модуля

КонецФункции // Сохранить()

//  Не доделано ( -------------------------
//  Страницы - строка типа "1-3; 7; 9"
//  ВФайл    - путь к файлу, если печатать в файл    
&НаСервереБезКонтекста
Функция _Печать(ТабличныйМодуль, Страницы = Неопределено, ВФайл = Неопределено, КоличествоКопий = Неопределено)
    Если ТабличныйМодуль.Тип = "Excel" Тогда
        ТабличныйМодуль.Документ.PrintOut();
    
    ИначеЕсли ТабличныйМодуль.Тип = "OpenOffice" Тогда
        Параметры = Новый Структура();
        Если ЗначениеЗаполнено(Страницы) Тогда
        	Параметры.Вставить("Pages", "'"+ Страницы +"'");
        КонецЕсли; 
        Если ЗначениеЗаполнено(ВФайл) Тогда
        	Параметры.Вставить("FileName", "'"+ OOFileToURL(ВФайл) +"'");
        КонецЕсли; 
        Если ЗначениеЗаполнено(КоличествоКопий) Тогда
        	Параметры.Вставить("CopyCount", КоличествоКопий);
        КонецЕсли;
        ПараметрыПечати = ООСоздатьПараметры(ТабличныйМодуль, Параметры);
        ТабличныйМодуль.Документ.Print(ПараметрыПечати);
    КонецЕсли;               
    Возврат Неопределено;
КонецФункции // Печать()

//  Не доделано ( -------------------------
&НаСервереБезКонтекста
Процедура _ПоказатьСообщение(ТабличныйМодуль)
//    Фабрика = Объект.Документ.queryInterface("com.sun.star.awt.XMessageBoxFactory");


//     public XWindowPeer getWindowPeer(XFrame _xFrame){
// XWindow xWindow = _xFrame.getContainerWindow();
// XWindowPeer xWindowPeer = (XWindowPeer)
//UnoRuntime.queryInterface(XWindowPeer.class, xWindow);
// return xWindowPeer;

//    Фабрика.createMessageBox(_xParentWindowPeer, aRectangle,
//"errorbox", com.sun.star.awt.MessageBoxButtons.BUTTONS_OK, _sTitle,
//_sMessage);


КонецПроцедуры

#КонецОбласти 

#Область ЛистДокумента

&НаСервереБезКонтекста
Функция ЛистПоНомеру(ТабличныйМодуль, Номер)

	Если ТабличныйМодуль.Тип = "Excel" Тогда
        Листы = ТабличныйМодуль.КОМОбъект.Sheets; 
        КоличествоЛистов = Листы.Count();
        Если 0<Номер И Номер <= КоличествоЛистов Тогда
            Лист = ТабличныйМодуль.КОМОбъект.Sheets(Номер);
        Иначе
            Лист = Листы.Add();
        КонецЕсли;
        ТабличныйМодуль.Вставить("Лист", Лист);
        Лист.Activate();
        Возврат Лист;
    ИначеЕсли ТабличныйМодуль.Тип = "OpenOffice" Тогда
        //  https://www.openoffice.org/api/docs/common/ref/com/sun/star/sheet/module-ix.html
        Листы = ТабличныйМодуль.Документ.GetSheets();   // Объект.Документ.Sheets
        КоличествоЛистов = Листы.Count();
        Если 0<Номер И Номер <= КоличествоЛистов Тогда
            Лист = Листы.getByIndex(Номер-1);
        Иначе
            Листы.insertNewByName("НовыйЛист", КоличествоЛистов);
            Лист = Листы.getByIndex(КоличествоЛистов);
        КонецЕсли; 
        ТабличныйМодуль.Вставить("Лист", Лист);
        ТабличныйМодуль.Документ.CurrentController.setActiveSheet(Лист);     //  Переключаем текущий лист
        Возврат Лист;
    КонецЕсли;               
    Возврат Неопределено;
КонецФункции // Лист()

&НаСервереБезКонтекста
Функция ЛистПоИмени(ТабличныйМодуль, Имя)

	Если ТабличныйМодуль.Тип = "Excel" Тогда
        Лист = Неопределено;
        Количество = ТабличныйМодуль.Документ.Sheets.Count;
        Для Индекс = 1 По Количество Цикл
        	ЛистВКоллекции = ТабличныйМодуль.Документ.Sheets(Индекс);
            Если ЛистВКоллекции.Name = Имя Тогда
                Лист = ЛистВКоллекции;
            	Прервать;
            КонецЕсли; 
        КонецЦикла; 
        Если Лист = Неопределено Тогда
            Лист = ТабличныйМодуль.Документ.Sheets.Add();
            Лист.Name = Имя;
        КонецЕсли; 
        ТабличныйМодуль.Вставить("Лист", Лист);
        Возврат Лист;
    ИначеЕсли ТабличныйМодуль.Тип = "OpenOffice" Тогда
        Листы = ТабличныйМодуль.Документ.GetSheets();
        Если Листы.hasByName(Имя) Тогда
        	Лист  = Листы.getByName(Имя);
        Иначе
            КоличествоЛистов = ТабличныйМодуль.Документ.Sheets.Count();
            Лист  = Листы.insertNewByName(Имя, КоличествоЛистов);
        КонецЕсли; 
        ТабличныйМодуль.Вставить("Лист", Лист);
        Возврат Лист;
    КонецЕсли;               
    Возврат Неопределено;
КонецФункции // Лист()

#КонецОбласти 

#Область ЯчейкиДокумента

&НаСервереБезКонтекста
Функция Ячейка(ТабличныйМодуль, X, Y, ОбластьЯчеек = Неопределено)
	Если ТабличныйМодуль.Тип = "Excel" Тогда
        Если ОбластьЯчеек = Неопределено Тогда
            Ячейка = ТабличныйМодуль.Лист.Cells (Y+1, X+1);
        Иначе
            Ячейка = ОбластьЯчеек.Cells(Y+1, X+1);
        КонецЕсли;
        ТабличныйМодуль.Вставить("Ячейка", Ячейка);
        Возврат Ячейка;    
    ИначеЕсли ТабличныйМодуль.Тип = "OpenOffice" Тогда
        // https://www.openoffice.org/api/docs/common/ref/com/sun/star/table/XCell.html
        Если ОбластьЯчеек = Неопределено Тогда
        	Ячейка = ТабличныйМодуль.Лист.getCellByPosition(X,Y);
        Иначе
            Ячейка = ОбластьЯчеек.getCellByPosition(X,Y);
        КонецЕсли; 
        ТабличныйМодуль.Вставить("Ячейка", Ячейка);
        Возврат Ячейка;
    КонецЕсли; 	
КонецФункции // Ячейка()

&НаСервереБезКонтекста
Функция ЯчейкаТекст(ТабличныйМодуль, X, Y, Значение = Неопределено,ОбластьЯчеек = Неопределено)
    Если ТабличныйМодуль.Тип = "Excel" Тогда
        Возврат ЯчейкаЗначение(ТабличныйМодуль, X, Y, Значение, ОбластьЯчеек);
	ИначеЕсли ТабличныйМодуль.Тип = "OpenOffice" Тогда
        Ячейка = Ячейка(ТабличныйМодуль, X, Y, ОбластьЯчеек); 
        Если ЗначениеЗаполнено(Значение) Тогда
        	Ячейка.String = Значение
        КонецЕсли;  
        Возврат ?(Ячейка=Неопределено, Неопределено, Ячейка.String);
	КонецЕсли; 	
КонецФункции // ЯчейкаТекст()
&НаСервереБезКонтекста
Функция ЯчейкаФормула(ТабличныйМодуль, X, Y, Значение = Неопределено, ОбластьЯчеек = Неопределено)
    Если ТабличныйМодуль.Тип = "Excel" Тогда
        Ячейка = Ячейка(ТабличныйМодуль, X, Y, ОбластьЯчеек); 
        Если ЗначениеЗаполнено(Значение) Тогда
        	Ячейка.Formula = Значение
        КонецЕсли; 
        
        Возврат ?(Ячейка=Неопределено, Неопределено, Ячейка.Formula);
	ИначеЕсли ТабличныйМодуль.Тип = "OpenOffice" Тогда
        Ячейка = Ячейка(ТабличныйМодуль, X, Y, ОбластьЯчеек); 
        Если ЗначениеЗаполнено(Значение) Тогда
        	Ячейка.Formula = Значение
        КонецЕсли; 
    
        Возврат ?(Ячейка=Неопределено, Неопределено, Ячейка.Formula);
	
    КонецЕсли; 	
КонецФункции // ЯчейкаФормула()
&НаСервереБезКонтекста
Функция ЯчейкаЗначение(ТабличныйМодуль, X, Y, Значение = Неопределено, ОбластьЯчеек = Неопределено)
    Если ТабличныйМодуль.Тип = "Excel" Тогда
            Ячейка = Ячейка(ТабличныйМодуль, X, Y, ОбластьЯчеек); 
        Если ЗначениеЗаполнено(Значение) Тогда
        	Ячейка.Value = Значение
        КонецЕсли;  
        Возврат ?(Ячейка=Неопределено, Неопределено, Ячейка.Value);
    ИначеЕсли ТабличныйМодуль.Тип = "OpenOffice" Тогда
        Ячейка = Ячейка(ТабличныйМодуль, X, Y, ОбластьЯчеек); 
        Если ЗначениеЗаполнено(Значение) Тогда
        	Ячейка.Value = Значение
        КонецЕсли; 
        
        Возврат ?(Ячейка=Неопределено, Неопределено, Ячейка.Value);
	
    КонецЕсли; 	
КонецФункции // ЯчейкаЗначение()
&НаСервереБезКонтекста
Функция ОбластьЯчеек(ТабличныйМодуль, X, Y, X1, Y1)
	Слева  = ?(X<X1, X,  X1);
    Справа = ?(X<X1, X1, X);
    Верх   = ?(Y<Y1, Y,  Y1);
    Низ    = ?(Y<Y1, Y1, Y);
    
    Если ТабличныйМодуль.Тип = "Excel" Тогда
        ЯчейкаНачало = Ячейка(ТабличныйМодуль, Слева,  Верх);
        ЯчейкаКонец  = Ячейка(ТабличныйМодуль, Справа, Низ);
        Область = ТабличныйМодуль.Лист.Range(ЯчейкаНачало, ЯчейкаКонец);
        ТабличныйМодуль.Вставить("Область", Область);
        Возврат Область;
    ИначеЕсли ТабличныйМодуль.Тип = "OpenOffice" Тогда
        // https://www.openoffice.org/api/docs/common/ref/com/sun/star/sheet/SheetCellRange.html
        
        Область = ТабличныйМодуль.Лист.getCellRangeByPosition(Слева, Верх, Справа, Низ);
        ТабличныйМодуль.Вставить("Область", Область);
        Возврат Область;
    КонецЕсли; 	
КонецФункции // ОбластьЯчеек()

&НаСервереБезКонтекста
Функция Объединить(ТабличныйМодуль, Область = Неопределено)
    Если Не ЗначениеЗаполнено(Область) Тогда
    	Область = ТабличныйМодуль.Область;
    КонецЕсли; 
	Если ТабличныйМодуль.Тип = "Excel" Тогда
        Область.Merge();
    ИначеЕсли ТабличныйМодуль.Тип = "OpenOffice" Тогда
        Область.Merge(Истина);
    КонецЕсли; 	
КонецФункции // Объединить()

&НаСервереБезКонтекста
Функция ТипЯчейки(ТабличныйМодуль, Ячейка)
    
    Если ТабличныйМодуль.Тип = "Excel" Тогда
        Если Ячейка.HasFormula Тогда
            Возврат ТабличныйМодуль.ТипыЯчеек.Формула;
        ИначеЕсли Ячейка.Value = "" Тогда
            Возврат ТабличныйМодуль.ТипыЯчеек.Пустая;
        ИначеЕсли ТипЗнч(1 + Ячейка.Value) = Тип("Число") Тогда
            Возврат ТабличныйМодуль.ТипыЯчеек.Значение;
        КонецЕсли;
        Возврат Ячейка.ТипыЯчеек.Текст;
    ИначеЕсли ТабличныйМодуль.Тип = "OpenOffice" Тогда
        Возврат Ячейка.Type;
	КонецЕсли;

    Возврат Неопределено; 	
КонецФункции // ТипЯчейки()

#КонецОбласти 

#Область СтилиДокумента

//  Не доделано ( -------------------------
&НаСервереБезКонтекста
Функция _ФорматЗначенийЯчеек(ТабличныйМодуль, Область)
    // http://www.openoffice.org/api/docs/common/ref/com/sun/star/lang/Locale.html
    Локаль = Новый Структура();  //!!!
    ВсеФорматыЯчеек = ТабличныйМодуль.Документ.NumberFormats;
    //ФорматыПоКлючу = ВсеФорматыЯчеек.queryKeys(0, Локаль, Ложь);
	ФорматыПоКлючу = ВсеФорматыЯчеек.queryKeys(ООПолучитьСОМОбъект(ТабличныйМодуль,"com.sun.star.util.NumberFormat.CURRENCY"), Локаль , Ложь);
    НайденФормат = -1;
    Для каждого Ключ Из ФорматыПоКлючу  Цикл
        Свойства = ВсеФорматыЯчеек.getByKey(Ключ).getPropertyValues();
        Для каждого Свойство Из Свойства  Цикл
            Если Свойство.Name = "LeadingZeros" Тогда
                ПослНули = Свойство.Value;
            КонецЕсли;
            Если Свойство.Name = "NegativeRed" Тогда
                ОтрицКрасн = Свойство.Value;
            КонецЕсли;
            Если Свойство.Name = "ThousandsSeparator" Тогда
                РазделТысяч = Свойство.Value;
            КонецЕсли;
        КонецЦикла;
        Если ПослНули = 0 И ОтрицКрасн = TRUE И РазделТысяч = TRUE Тогда
            НайденФормат = Ключ;
        КонецЕсли;
    КонецЦикла;  
    

    Если НайденФормат < 0 Тогда
        НовыйФормат = ВсеФорматыЯчеек.generateFormat( ФорматыПоКлючу[0], Локаль, Истина, Истина, 2, 0 );
        Ключ = ВсеФорматыЯчеек.queryKey( НовыйФормат, Локаль, Истина );
        Если Ключ=-1 Тогда
            Ключ = ВсеФорматыЯчеек.addNew( НовыйФормат,  Локаль);
        КонецЕсли;
        НайденФормат = Ключ;
    КонецЕсли;
    Область.Numberformat = НайденФормат;
КонецФункции // СтильЯчеек()
 
&НаСервереБезКонтекста
Функция НовыйСтильТекста(ТабличныйМодуль, Название, Шрифт, Высота, Вес = Неопределено, Выравнивание = Неопределено)
	    
    Если ТабличныйМодуль.Тип = "Excel" Тогда
        // https://docs.microsoft.com/ru-ru/office/vba/api/excel.font%28object%29
        Стиль = Неопределено;
        Количество = ТабличныйМодуль.Документ.Styles.Count;
        Для Индекс = 1 По Количество Цикл
        	СтильВКоллекции = ТабличныйМодуль.Документ.Styles(Индекс);
            Если СтильВКоллекции.Name = Название Тогда
                Стиль = СтильВКоллекции;
            	Прервать;
            КонецЕсли; 
        КонецЦикла; 
        //Стиль = Объект.Документ.Styles(Название);
        Если Стиль = Неопределено Тогда
            Стиль = ТабличныйМодуль.Документ.Styles.Add(Название);
        КонецЕсли; 
        Стиль.Font.Name = Шрифт;
        Стиль.Font.Size = Высота;
        Если ЗначениеЗаполнено(Вес) Тогда
            Стиль.Font.Bold = Вес;
        КонецЕсли; 
        Если ЗначениеЗаполнено(Выравнивание) Тогда
            Стиль.includeAlignment = Истина;
            Стиль.horizontalAlignment = Выравнивание;
        КонецЕсли;
        Стиль.includeBorder = Ложь;
        Возврат Стиль;
    ИначеЕсли ТабличныйМодуль.Тип = "OpenOffice" Тогда
        //  https://www.openoffice.org/api/docs/common/ref/com/sun/star/sheet/TableCellStyle.html 
        СтилиПараграфа  = ТабличныйМодуль.Документ.StyleFamilies.getByName("CellStyles");
        Если Не СтилиПараграфа.hasByName(Название) Тогда
            Стиль = ТабличныйМодуль.Документ.createInstance("com.sun.star.style.CellStyle");
            СтилиПараграфа.insertByName(Название, Стиль);
            Стиль.Name = Название;
        Иначе
            Стиль = СтилиПараграфа.getByName(Название);
        КонецЕсли;          
        Стиль.CharFontName = Шрифт;
        Стиль.CharHeight   = Высота;
        Если ЗначениеЗаполнено(Вес) Тогда
            Стиль.CharWeight = Вес;
        КонецЕсли; 
        Если ЗначениеЗаполнено(Выравнивание) Тогда
            Стиль.ParaAdjust = Выравнивание;
        КонецЕсли;
        Возврат Стиль;
    КонецЕсли; 	
КонецФункции // СтильТекста()

&НаСервереБезКонтекста
Функция УстановитьСтильТекста(ТабличныйМодуль, ОбластьИлиЯчейка, НазваниеСтиля);
	Если ТабличныйМодуль.Тип = "Excel" Тогда
        ОбластьИлиЯчейка.Style = НазваниеСтиля;
    ИначеЕсли ТабличныйМодуль.Тип = "OpenOffice" Тогда
        ОбластьИлиЯчейка.CellStyle = НазваниеСтиля;
    КонецЕсли; 	
КонецФункции // УстановитьСтиль()
        
&НаСервереБезКонтекста
Функция ЗаполнитьГраницыОбласти(ТабличныйМодуль, 
                                Область, 
                                ЦветГраницы, 
                                Слева          = Неопределено, 
                                Сверху         = Неопределено, 
                                Справа         = Неопределено, 
                                Снизу          = Неопределено, 
                                Горизонтальные = Неопределено, 
                                Вертикальные   = Неопределено)
    
    ЦветГраницы = (ЦветГраницы.Красный*256+ЦветГраницы.Зеленый)*256+ЦветГраницы.Синий;

     
    
    Если ТабличныйМодуль.Тип = "Excel" Тогда
        ТолщиныГраниц = Новый Структура();
        ТолщиныГраниц.Вставить("Слева",          Слева);
        ТолщиныГраниц.Вставить("Сверху",         Сверху);
        ТолщиныГраниц.Вставить("Справа",         Справа);
        ТолщиныГраниц.Вставить("Снизу",          Снизу);
        ТолщиныГраниц.Вставить("Горизонтальные", Горизонтальные);
        ТолщиныГраниц.Вставить("Вертикальные",   Вертикальные);
        
        ТипГраницы = Новый Структура();
        ТипГраницы.Вставить("ДиагональВниз",   5); // xlDiagonalDown
        ТипГраницы.Вставить("ДиагональВверх",  6); // xlDiagonalUp
        ТипГраницы.Вставить("Снизу",	       9);  // xlEdgeBottom
        ТипГраницы.Вставить("Слева",	       7); // xlEdgeLeft
        ТипГраницы.Вставить("Справа",	      10); // xlEdgeRight
        ТипГраницы.Вставить("Сверху",	       8); // xlEdgeTop
        ТипГраницы.Вставить("Горизонтальные", 12); // xlInsideHorizontal
        ТипГраницы.Вставить("Вертикальные",	  11); // xlInsideVertical
        
        //ТипЛинии = Новый Структура();
        //ТипЛинии.Вставить("Непрерывная",		1);	// xlContinuous
        //ТипЛинии.Вставить("Пунктирная",	    -4115); // xlDash
        //ТипЛинии.Вставить("ПунктирСТочкой",		4); // xlDashDot	
        //ТипЛинии.Вставить("ПунктирС2Точками",	5); // xlDashDotDot	
        //ТипЛинии.Вставить("ЛинияИзТочек",	-4118); // xlDot
        //ТипЛинии.Вставить("Двойная",	    -4119); //xlDouble	
        //ТипЛинии.Вставить("БезЛиний",	    -4142); // xlLineStyleNone	
        //ТипЛинии.Вставить("НаклоннаяПунктирная",13); // xlSlantDashDot	
        //
        ТолщинаГраницы = Новый Структура();     
        ТолщинаГраницы.Вставить("ОченьТонкая",	1); // xlHairline
        ТолщинаГраницы.Вставить("Тонкая",	    2); // xlThin	
        ТолщинаГраницы.Вставить("Средняя",	-4138); // xlMedium	
        ТолщинаГраницы.Вставить("Толстая",	    4); // xlThick	
        
        
        Границы       = Область.Borders;
        Границы.Color = ЦветГраницы;
        Для каждого Граница Из ТолщиныГраниц Цикл
            Если ЗначениеЗаполнено(Граница.Значение) Тогда
            
                Если Граница.Значение < 10 Тогда
                    Толщина = ТолщинаГраницы.ОченьТонкая;
                ИначеЕсли  Граница.Значение < 20 Тогда
                    Толщина = ТолщинаГраницы.Тонкая;
                ИначеЕсли  Граница.Значение < 40 Тогда
                    Толщина = ТолщинаГраницы.Средняя;
                Иначе
                    Толщина = ТолщинаГраницы.Толстая;
                КонецЕсли;
                //Границы.Item(ТипГраницы[Граница.Ключ]).LineStyle = ТипЛинии.Непрерывная;
            	Границы.Item(ТипГраницы[Граница.Ключ]).Weight = Толщина;
            КонецЕсли; 
        КонецЦикла; 
    
    ИначеЕсли ТабличныйМодуль.Тип = "OpenOffice" Тогда

        Границы     = Область.TableBorder;
        ГрСлева     = Границы.LeftLine;
        ГрСверху    = Границы.TopLine;
        ГрСправа    = Границы.RightLine;
        ГрСнизу     = Границы.BottomLine;
        ГрГориз     = Границы.HorizontalLine;
        ГрВерт      = Границы.VerticalLine;	
        
        Если ЗначениеЗаполнено(Слева) Тогда
            ГрСлева.OuterLineWidth = Слева;
            ГрСлева.Color          = ЦветГраницы;
        КонецЕсли; 
        Если ЗначениеЗаполнено(Сверху) Тогда
        	ГрСверху.OuterLineWidth = Сверху;
            ГрСверху.Color          = ЦветГраницы;
        КонецЕсли; 
        Если ЗначениеЗаполнено(Справа) Тогда
        	ГрСправа.OuterLineWidth = Справа;
            ГрСправа.Color          = ЦветГраницы;
        КонецЕсли;     
        Если ЗначениеЗаполнено(Снизу) Тогда
        	ГрСнизу.OuterLineWidth = Снизу;
            ГрСнизу.Color          = ЦветГраницы;
        КонецЕсли; 
        Если ЗначениеЗаполнено(Горизонтальные) Тогда
        	ГрГориз.OuterLineWidth = Горизонтальные;
            ГрГориз.Color          = ЦветГраницы;
        КонецЕсли; 
        Если ЗначениеЗаполнено(Вертикальные) Тогда
        	ГрВерт.OuterLineWidth = Вертикальные;
            ГрВерт.Color          = ЦветГраницы;
        КонецЕсли;
        Границы.LeftLine       = ГрСлева;
        Границы.TopLine        = ГрСверху;
        Границы.RightLine      = ГрСправа;
        Границы.BottomLine     = ГрСнизу;
        Границы.HorizontalLine = ГрГориз;
        Границы.VerticalLine   = ГрВерт;	
        Область.TableBorder    = Границы;
    КонецЕсли;
                        
КонецФункции // ЗаполнитьГраницыОбласти()
 
&НаСервереБезКонтекста
Процедура АвтоШирина(ТабличныйМодуль, ИндексПервойКолонки, ИндексПоследнейКолонки=-1)
    Если ТабличныйМодуль.Тип = "Excel" Тогда
        Индекс = ИндексПервойКолонки;
        ТабличныйМодуль.Лист.Cells.Columns(Индекс+1).AutoFit();
        Если Индекс >=ИндексПоследнейКолонки Тогда
        	Возврат;
        КонецЕсли; 
        Для Индекс = ИндексПервойКолонки+1 По ИндексПоследнейКолонки Цикл
            ТабличныйМодуль.Лист.Cells.Columns(Индекс+1).AutoFit();
        КонецЦикла;
    ИначеЕсли ТабличныйМодуль.Тип = "OpenOffice" Тогда
    	Колонки = ТабличныйМодуль.Лист.getColumns();
        Индекс = ИндексПервойКолонки;
        Колонки.getByIndex(Индекс).OptimalWidth = Истина;
        Если Индекс >=ИндексПоследнейКолонки Тогда
        	Возврат;
        КонецЕсли; 
        Для Индекс = ИндексПервойКолонки+1 По ИндексПоследнейКолонки Цикл
            Колонки.getByIndex(Индекс).OptimalWidth = Истина;
        КонецЦикла; 
    КонецЕсли; 	
КонецПроцедуры // АвтоШирина()
 
&НаСервереБезКонтекста
Процедура Группировать(ТабличныйМодуль, Ориентация, Область=Неопределено)
    Если Область = Неопределено Тогда
        Область = ТабличныйМодуль.Область;
    КонецЕсли; 
    
    Если ТабличныйМодуль.Тип = "Excel" Тогда
        #Область ИзменениеСтиляПоведенияПриГруппировке
        
        Поля = ТабличныйМодуль.Лист.Outline;
        	
        Поля.AutomaticStyles = Ложь;
        // https://docs.microsoft.com/ru-ru/office/vba/api/excel.xlsummaryrow
        Поля.SummaryRow = 0;        //  xlSummaryAbove
        // https://docs.microsoft.com/ru-ru/office/vba/api/excel.xlsummarycolumn
        Поля.SummaryColumn = -4131; //  xlSummaryOnLeft
        //Объект.Лист.Cells.ApplyOutlineStyles();
        
        #КонецОбласти 
        
        Если Ориентация = ТабличныйМодуль.Ориентация.Строки Тогда
            Область.Rows.Group();
        ИначеЕсли Ориентация = ТабличныйМодуль.Ориентация.Столбцы Тогда	
            Область.Columns.Group();
        КонецЕсли; 
    ИначеЕсли ТабличныйМодуль.Тип = "OpenOffice" Тогда
        ТабличныйМодуль.Лист.group(Область.getRangeAddress(), Ориентация);
    КонецЕсли; 	
КонецПроцедуры // Группировать()


&НаСервереБезКонтекста
Процедура ЦветФона(ТабличныйМодуль, ОбластьИлиЯчейка, Цвет)
    Если ТабличныйМодуль.Тип = "Excel" Тогда
        ОбластьИлиЯчейка.Interior.Color = (Цвет.Синий*256+Цвет.Зеленый)*256+Цвет.Красный; 
    ИначеЕсли ТабличныйМодуль.Тип = "OpenOffice" Тогда
        ОбластьИлиЯчейка.CellBackColor  = (Цвет.Красный*256+Цвет.Зеленый)*256+Цвет.Синий;
    КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗафиксироватьПоЯчейке(ТабличныйМодуль, Х, Y);
    Если ТабличныйМодуль.Тип = "Excel" Тогда
        ТабличныйМодуль.КОМОбъект.ActiveWindow.SplitColumn = Х;
        ТабличныйМодуль.КОМОбъект.ActiveWindow.SplitRow    = Y;
        ТабличныйМодуль.КОМОбъект.ActiveWindow.FreezePanes = Истина;
    ИначеЕсли ТабличныйМодуль.Тип = "OpenOffice" Тогда
        //Объект.Документ.CurrentController.splitAtPosition(Х*CellsSizeXInPixel, Y*CellsSizeYInPixel);
        ТабличныйМодуль.Документ.CurrentController.freezeAtPosition(Х, Y);
    КонецЕсли;
КонецПроцедуры        
                 
#КонецОбласти

&НаСервереБезКонтекста
Процедура ВыгрузитьЛистНаСервере(НазваниеСправочника, ТМ, НомерЛиста)
    Реквизиты = Метаданные.Справочники[НазваниеСправочника].Реквизиты;
    #Область ЗаголовкиСтолбцов_ИменаРеквизитов_ТекстЗапроса
        
    Заголовки = Новый Массив();
    Имена     = Новый Массив();
    
    Заголовки.Добавить("Наименование");
    Заголовки.Добавить("Код");
    Имена.Добавить("Наименование");
    Имена.Добавить("Код");
    ЕстьИерархия = Метаданные.Справочники[НазваниеСправочника].Иерархический;
    Если ЕстьИерархия Тогда
    
        Заголовки.Добавить("Это Группа");
        Заголовки.Добавить("Родитель");
        Имена.Добавить("ЭтоГруппа");
        Имена.Добавить("Родитель.Наименование");

    КонецЕсли; 
    
    #Область ТекстЗапроса
    ТекстЗапроса = Заголовки[0];
    Для Индекс = 1 По Имена.Количество()-1 Цикл
        Имя = Имена[Индекс];
        ТекстЗапроса = ТекстЗапроса + ", " + Имя;
    
        Если Найти(Имя, ".") <> 0 Тогда
            Имя = СтрЗаменить(Имя, ".", "_");
            ТекстЗапроса = ТекстЗапроса + " КАК " + Имя;
            Имена[Индекс] = Имя;
        КонецЕсли;
    КонецЦикла; 
    Для каждого Реквизит Из Реквизиты Цикл
    
        Заголовки.Добавить(Реквизит.Синоним);
        Имена.Добавить(Реквизит.Имя);
        ТекстЗапроса = ТекстЗапроса + ", " + Реквизит.Имя;
    
    КонецЦикла; 
    
    ТекстЗапроса = "ВЫБРАТЬ " + ТекстЗапроса + " ИЗ
                   | Справочник." + НазваниеСправочника + " УПОРЯДОЧИТЬ ПО
                   | Наименование" + ?(ЕстьИерархия," ИЕРАРХИЯ ","");
    #КонецОбласти 
    #КонецОбласти 
    
    Запрос = Новый Запрос(ТекстЗапроса);
    РезультатЗапроса = Запрос.Выполнить();
    
    Если Не РезультатЗапроса.Пустой() Тогда
        Лист = ЛистПоНомеру(ТМ,НомерЛиста);
        Лист.Name = НазваниеСправочника;
        
        
        Заголовки.Вставить(0, "№ п/п");
        Ширина      = Заголовки.Количество();
        СмещениеХ   = 1;
        СмещениеY   = 1;
        СтрокаШапки = 1;

        
        #Область СозданиеСтилейДокумента
        ЗафиксироватьПоЯчейке(ТМ, 0, СмещениеY+СтрокаШапки+1);
        
        НовыйСтильТекста(ТМ,
                         "СтильЗаголовока",
                         "Arial",
                         16, 
                         ТМ.ВесШрифта.ОченьТолстый, 
                         ТМ.Выравнивание.Слева);
        НовыйСтильТекста(ТМ,
                         "СтильШапкиТаблицы",
                         "Arial",
                         12, 
                         ТМ.ВесШрифта.Нормальный,   
                         ТМ.Выравнивание.ПоЦентру);
        НовыйСтильТекста(ТМ,
                         "СтильЯчеек",       
                         "Arial",
                         12);
        
        ЦветФонаГруппы = Новый Цвет(230,230,222);
        ЦветФонаШапки  = Новый Цвет(255,153,0);
        
        #КонецОбласти 
        
        #Область ЗаполнениеЗаголовка
        ОбластьЯчеек(ТМ, СмещениеХ, СмещениеY, СмещениеХ+Ширина-1, СмещениеY );
        
        ЯчейкаТекст(ТМ,  0, 0, НазваниеСправочника, ТМ.Область);
        
        Объединить(ТМ);
        УстановитьСтильТекста(ТМ, ТМ.Область, "СтильЗаголовока");
        #КонецОбласти 
        
        #Область ЗаполнениеШапки
        ОбластьЯчеек(ТМ, СмещениеХ, СмещениеY+СтрокаШапки, СмещениеХ+Ширина-1, СмещениеY+СтрокаШапки);

        УстановитьСтильТекста(ТМ, ТМ.Область, "СтильШапкиТаблицы");
        ЦветФона(ТМ, ТМ.Область, ЦветФонаШапки);
        ЗаполнитьГраницыОбласти(ТМ, ТМ.Область, Новый Цвет(0,0,0), 35, 35, 35, 35, 35, 35);
        
        Для Х = 0 По Ширина-1 Цикл
            ЯчейкаТекст(ТМ, Х, 0, Заголовки[Х], ТМ.Область);
        КонецЦикла;
        #КонецОбласти 
        
        Выборка = РезультатЗапроса.Выбрать();
        
        #Область ЗаполнениеТаблицы
        
        Высота = Выборка.Количество();
        ОбластьТаблицы = ОбластьЯчеек(ТМ, СмещениеХ, СмещениеY+СтрокаШапки+1, СмещениеХ+Ширина-1, СмещениеY+СтрокаШапки+1+Высота-1 );

        ЗаполнитьГраницыОбласти(ТМ, ТМ.Область, Новый Цвет(0,0,0), 35, 35, 35, 35, 35, 35);
        УстановитьСтильТекста(ТМ, ОбластьТаблицы, "СтильЯчеек");
        
        ОбластиГруппировки = Новый Массив();
        ОблГрИндекс = -1;
        ПоследнийРодитель = Неопределено;
        Уровень = -1;
        Для У=0 По Высота-1 Цикл
            Выборка.Следующий();
            #Область ЗаполнениеОбластейГруппировки
            Если ЕстьИерархия Тогда
                ТекущийРодитель = Выборка["Родитель_Наименование"];
                
                СдвинутьОбласти = Ложь;
                
                Если ТекущийРодитель=ПоследнийРодитель Тогда            //  Если название родителя не поменялось
                    СдвинутьОбласти = Истина;
                Иначе                                                   //  Если название родителя поменялось
                    Если ТекущийРодитель=NULL Тогда                     //  Если корневой элемент
                        Уровень = 0;                                    //  
                    Иначе                                               //  Если не корневой элемент
                        Индекс = ОблГрИндекс;
                        Уровень =  ОбластиГруппировки[Индекс].Уровень + 1;     //  Ставим ниже по иерархии
                        Пока Индекс>=0 Цикл                             //  Проверяем, есть ли запись уже с таким родителем
                            Запись = ОбластиГруппировки[Индекс];
                            Если Запись.Родитель=NULL Тогда             //  Нет записей - элемент остаётся ниже по иерархии
                                Прервать;                               
                            КонецЕсли;
                            Если Запись.Родитель=ТекущийРодитель Тогда  //  Есть запись.
                                ОблГрИндекс = Индекс;                   //  Обновляем индекс текущей области группировки
                                Уровень = Запись.Уровень;               //  Поднимаем элемент до прежнего уровня иерархии
                                СдвинутьОбласти = Истина;
                                Прервать;
                            КонецЕсли; 
                            
                            Индекс = Индекс - 1;
                        КонецЦикла;
                    КонецЕсли; 
                КонецЕсли;
                Если СдвинутьОбласти Тогда                      //  Расширяем область группировки родителей до текущего элемента
                    Индекс = ОблГрИндекс;
                    Пока Индекс>=0 Цикл
                        Запись = ОбластиГруппировки[Индекс];
                        Если Запись.Родитель = NULL Тогда       //  Коренной элемент
                            Запись.Конец = У;                   //  Расширяем область группировки до текущего элемента
                            Прервать;
                        КонецЕсли;
                        Если Уровень>Запись.Уровень Тогда       //  Если выше по иерархии
                            Запись.Конец = У;                   //  Расширяем область группировки родителей до текущего элемента
                        КонецЕсли; 
                        Если Уровень = Запись.Уровень И ТекущийРодитель = Запись.Родитель Тогда      
                            Запись.Конец = У;                   
                        КонецЕсли; 
                        
                        Индекс = Индекс - 1;
                    КонецЦикла;
                Иначе     
                    Запись = Новый Структура();
                    Запись.Вставить("Начало",У);
                    Запись.Вставить("Конец",У);
                    Запись.Вставить("Уровень",Уровень);
                    Запись.Вставить("Родитель",ТекущийРодитель);
                        
                    ОбластиГруппировки.Добавить(Запись);
                    ОблГрИндекс = ОбластиГруппировки.Количество()-1;
                КонецЕсли;                                               
                ПоследнийРодитель = ТекущийРодитель;
            КонецЕсли; 
            #КонецОбласти
           
            #Область НомерПоПорядку
            ЯчейкаЗначение(ТМ, 0, У, У+1, ОбластьТаблицы);
            #КонецОбласти
           
             Для Х=1 По Ширина-1 Цикл        
                Значение = Выборка[Имена[Х-1]];
                Если ТипЗнч(Значение) = Тип("Число") Тогда
                      ЯчейкаЗначение(ТМ, Х, У, Значение, ОбластьТаблицы);
                Иначе	
                      ЯчейкаТекст(ТМ, Х, У, Строка(Значение), ОбластьТаблицы);
                КонецЕсли; 
            КонецЦикла;
            Если ЕстьИерархия И Выборка["ЭтоГруппа"] = Истина Тогда
                
                ОбластьЯчеек(ТМ, СмещениеХ, СмещениеY+СтрокаШапки+1+У, СмещениеХ+Ширина-1, СмещениеY+СтрокаШапки+1+У );
                ЦветФона(ТМ,ТМ.Область,ЦветФонаГруппы);
            
            КонецЕсли;  
        КонецЦикла;
        #КонецОбласти
        АвтоШирина(ТМ, СмещениеХ, СмещениеХ+Ширина-1);
        
        #Область ГруппировкаПоОбластямГруппировки
            
        Если ЕстьИерархия Тогда
            Для каждого ОбластьГр Из ОбластиГруппировки Цикл
                Если ОбластьГр.Уровень>=0 Тогда
                    ОбластьЯчеек(ТМ,0,СтрокаШапки+2+ОбластьГр.Начало,0,СтрокаШапки+2+ОбластьГр.Конец);
                    Группировать(ТМ, ТМ.Ориентация.Строки, ТМ.Область);
                КонецЕсли; 
            КонецЦикла; 
        КонецЕсли;
        
        #КонецОбласти 
             
    Иначе
        Сообщить("В справочнике " + НазваниеСправочника + " нет данных для отображения");
    КонецЕсли; 

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыгрузитьНаСервере(НазваниеСправочника, ПутьКФайлу)
    ТМ = ОткрытьДокумент(ПутьКФайлу);
    Если ЗначениеЗаполнено(ТМ) Тогда
        Если ЗначениеЗаполнено(НазваниеСправочника) Тогда
            ВыгрузитьЛистНаСервере(НазваниеСправочника, ТМ, 1);
            Сообщить("Выгрузка справочника закончена");
        Иначе
            ВыгрузитьЛистНаСервере("Номенклатура", ТМ, 1);
            ВыгрузитьЛистНаСервере("Контрагенты",  ТМ, 2);
            ВыгрузитьЛистНаСервере("Валюты",       ТМ, 3);
            ВыгрузитьЛистНаСервере("Склады",       ТМ, 4);
            
            ЛистПоНомеру(ТМ,1);
            
            //_ПоказатьСообщение(ТМ);
            
            Сообщить("Выгрузка справочников закончена");
        КонецЕсли;
    Иначе
        Сообщить("Не удалось создать документ");
    КонецЕсли;        
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
    ВыгрузитьНаСервере(ВыборСправочника, ПутьКФайлу);
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
    ДиалогВыбораФайла.Фильтр                      = НСтр("ru='Таблицы|*.xls;*.ods;*.xlsx|XLS файл (*.xls)|*.xls;*.xlsx|ODS файл (*.ods)|*.ods'");
    ДиалогВыбораФайла.Заголовок                   = НСтр("ru='Выберите файл'");
    ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
    ДиалогВыбораФайла.Расширение                  = "xls";
    ДиалогВыбораФайла.ИндексФильтра               = 0;
    ДиалогВыбораФайла.ПолноеИмяФайла              = ЭтотОбъект.ПутьКФайлу;
    ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Ложь;

    Если ДиалогВыбораФайла.Выбрать() Тогда
    	ПутьКФайлу = ДиалогВыбораФайла.ПолноеИмяФайла;
    КонецЕсли;
КонецПроцедуры



