
Функция ПолучитьСписокОкладов(Сотрудники, Дата, Должности = Неопределено, Подразделения = Неопределено) Экспорт
	
	
	Результат = Новый Массив();
	Если НЕ ЗначениеЗаполнено(Сотрудники) Тогда
		Возврат Результат;
	КонецЕсли;
	Если Сотрудники.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОкладыСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
		|	ОкладыСотрудниковСрезПоследних.Должность КАК Должность,
		|	ОкладыСотрудниковСрезПоследних.Подразделение КАК Подразделение,
		|	ОкладыСотрудниковСрезПоследних.Оклад КАК Оклад,
		|	ОкладыСотрудниковСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрСведений.ОкладыСотрудников.СрезПоследних(&Дата, Сотрудник В (&Сотрудники)) КАК ОкладыСотрудниковСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОкладыСотрудниковСрезПоследних.Период УБЫВ";
	ЕстьДолжность = ЗначениеЗаполнено(Должности);
	ЕстьПодразделение = ЗначениеЗаполнено(Подразделения);
	
	Отбор = Новый ТаблицаЗначений;
		
	Если ЕстьДолжность ИЛИ ЕстьПодразделение Тогда
		ТекстЗамены = "Сотрудник В (&Сотрудники)";
		
		НовыйТекст = "(Сотрудник";
		Отбор.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		Если ЕстьДолжность Тогда
			Отбор.Колонки.Добавить("Должность", Новый ОписаниеТипов("СправочникСсылка.Должности"));
			НовыйТекст = НовыйТекст + ",Должность";
		КонецЕсли; 
		Если ЕстьПодразделение Тогда
			Отбор.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("ПеречислениеСсылка.Подразделения"));
			НовыйТекст = НовыйТекст + ",Подразделение";
		КонецЕсли; 
		НовыйТекст = НовыйТекст + ") В (&Отбор)";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстЗамены, НовыйТекст);
		
		Для Индекс = 0 По Сотрудники.ВГраница() Цикл
			СтрокаОтбора = Отбор.Добавить();
			СтрокаОтбора.Сотрудник = Сотрудники[Индекс];
			Если ЕстьДолжность Тогда
				СтрокаОтбора.Должность = Должности[Индекс];
			КонецЕсли; 
			Если ЕстьПодразделение Тогда
				СтрокаОтбора.Подразделение = Подразделения[Индекс];
			КонецЕсли;
		КонецЦикла; 
		
		Запрос.УстановитьПараметр("Отбор", Отбор);
	Иначе
		Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Для Индекс = 0 По Сотрудники.ВГраница() Цикл
		Сотрудник = Сотрудники[Индекс];
		Запись = Новый Структура("Сотрудник, Оклад,        Должность,    Подразделение"
								, Сотрудник, Новый Массив, Новый Массив, Новый Массив);
		Период = Неопределено; 
		
		СтруктураПоиска = Новый Структура("Сотрудник", Сотрудник);
		Если ЕстьДолжность Тогда
			СтруктураПоиска.Вставить("Должность", Должности[Индекс]);
		КонецЕсли; 
		Если ЕстьПодразделение Тогда
			СтруктураПоиска.Вставить("Подразделение", Подразделения[Индекс]);
		КонецЕсли; 
		
		Выборка.Сбросить();
		Пока Выборка.НайтиСледующий(СтруктураПоиска) Цикл
			Если Период = Неопределено Тогда
				Период = Выборка.Период;
			ИначеЕсли Выборка.Период < Период Тогда
				Прервать;
			КонецЕсли; 	
			Запись.Оклад.Добавить(Выборка.Оклад);
			Запись.Должность.Добавить(Выборка.Должность);
			Запись.Подразделение.Добавить(Выборка.Подразделение);
		КонецЦикла;
	    
		Результат.Добавить(Запись);
	КонецЦикла; 
	
	Возврат Результат;
КонецФункции
  


Процедура ОбработкаПроведения(Отказ, Режим)
	Сотрудники        = Новый Массив();
	Должности         = Новый Массив();
	Подразделения     = Новый Массив();
	ОкладыНомераСтрок = Новый Массив();
	ОкладыМесяц       = Неопределено;
	ПВРОклад          = ПланыВидовРасчета.ОсновныеНачисления.Оклад;
	ПВРКомандировка   = ПланыВидовРасчета.ОсновныеНачисления.Командировка;
	
	// регистр ОсновныеНачисления
	Движения.ОсновныеНачисления.Записывать = Истина;
	Для Каждого ТекСтрокаНачисления Из Начисления Цикл
		Движение = Движения.ОсновныеНачисления.Добавить();
		Движение.Сторно = Ложь;
		Движение.ВидРасчета = ТекСтрокаНачисления.ВидНачисления;
		Движение.ПериодДействияНачало = ТекСтрокаНачисления.ДатаНачала;
		Движение.ПериодДействияКонец = ТекСтрокаНачисления.ДатаОкончания;
		Движение.ПериодРегистрации = Дата;
		Движение.Сотрудник = ТекСтрокаНачисления.Сотрудник;
		//Движение.Результат = Размер * Факт / План;
		//Движение.Факт = Факт;
		//Движение.Размер = ТекСтрокаНачисления.Размер;
		Если ТекСтрокаНачисления.ВидНачисления = ПВРОклад 
		 ИЛИ ТекСтрокаНачисления.ВидНачисления = ПВРКомандировка Тогда
			
			Сотрудники.Добавить(ТекСтрокаНачисления.Сотрудник);
			Должности.Добавить(ТекСтрокаНачисления.Должность);
			Подразделения.Добавить(ТекСтрокаНачисления.Подразделение);
			ОкладыНомераСтрок.Добавить(ТекСтрокаНачисления.НомерСтроки);
			
			ОкладыДата = НачалоМесяца(ТекСтрокаНачисления.ДатаНачала);
			
			Если ОкладыМесяц = Неопределено Тогда
				ОкладыМесяц = ОкладыДата;
			ИначеЕсли ОкладыДата <> ОкладыМесяц Тогда
				Сообщить("Зачисление зарплаты в одном документе для разных месяцев не реализовано!" 
					+ " Строка номер:" + ТекСтрокаНачисления.НомерСтроки);
				Отказ = Истина;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	 
	Движения.ОсновныеНачисления.Записать();
	
	ОкладыПоСотрудникам = ПолучитьСписокОкладов(Сотрудники, ОкладыМесяц, Должности, Подразделения);
// ОКЛАД
	Запрос = Новый Запрос;	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОсновныеНачисленияДанныеГрафика.Сотрудник КАК Сотрудник,
		|	ЕСТЬNULL(ОсновныеНачисленияДанныеГрафика.ЗначениеЧасыФактическийПериодДействия, 0) КАК ФактЧасы,
		|	ЕСТЬNULL(ОсновныеНачисленияДанныеГрафика.ЗначениеЧасыПериодДействия, 0) КАК ПланЧасы,
		|	ОсновныеНачисленияДанныеГрафика.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисления.ДанныеГрафика(
		|			Регистратор = &Ссылка
		|				И ВидРасчета = &Оклад) КАК ОсновныеНачисленияДанныеГрафика";
	
	Запрос.УстановитьПараметр("Оклад", ПВРОклад);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Для каждого СтрДвижение Из Движения.ОсновныеНачисления Цикл
		Если СтрДвижение.ВидРасчета <> ПВРОклад Тогда
			Продолжить;
		КонецЕсли;
		Выборка.Сбросить();
		Выборка.НайтиСледующий(СтрДвижение.НомерСтроки, "НомерСтроки");
		
		Индекс = ОкладыНомераСтрок.Найти(СтрДвижение.НомерСтроки);
		Если ОкладыПоСотрудникам[Индекс].Оклад.Количество() = 0 Тогда
			Сообщить("Ошибка проведения документа Начисление зарплаты" 
				+ ?(ЗначениеЗаполнено(Номер), " № " + Номер, "")
				+ " от " + Дата
				+ ". Не установлен оклад сотрудника " + СтрДвижение.Сотрудник
				+ " (строка №" + СтрДвижение.НомерСтроки + ")");
			Отказ = Истина;
			Продолжить;
		КонецЕсли;
		Если Выборка.ПланЧасы = 0 Тогда
			СтрДвижение.Результат = 0;	
		Иначе
			Оклад = ОкладыПоСотрудникам[Индекс].Оклад[0];
			СтрДвижение.Результат = Оклад * Выборка.ФактЧасы / Выборка.ПланЧасы;
		КонецЕсли; 
		СтрДвижение.Факт = Выборка.ФактЧасы;
		
	КонецЦикла; 
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
// БОЛЬНИЧНЫЙ
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОсновныеНачисленияДанныеГрафика.ВидРасчета КАК ВидРасчета,
		|	ОсновныеНачисленияДанныеГрафика.Сотрудник КАК Сотрудник,
		|	ЕСТЬNULL(ОсновныеНачисленияДанныеГрафика.ЗначениеДниФактическийПериодДействия, 0) КАК ДниБолезни,
		|	ОсновныеНачисленияДанныеГрафика.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисления.ДанныеГрафика(
		|			Регистратор = &Ссылка
		|				И ВидРасчета = &Больничный) КАК ОсновныеНачисленияДанныеГрафика";
	
	Запрос.УстановитьПараметр("Больничный", ПланыВидовРасчета.ОсновныеНачисления.Больничный);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СтавкаПоБольничному = Константы.СтавкаПоБольничномуВДень.Получить();
	Для каждого СтрДвижение Из Движения.ОсновныеНачисления Цикл
		Если СтрДвижение.ВидРасчета <> ПланыВидовРасчета.ОсновныеНачисления.Больничный Тогда
			Продолжить;
		КонецЕсли;
		Выборка.Сбросить();
		Выборка.НайтиСледующий(СтрДвижение.НомерСтроки, "НомерСтроки");
		
		СтрДвижение.Результат = Выборка.ДниБолезни * СтавкаПоБольничному;
		СтрДвижение.Факт = Выборка.ДниБолезни;
	КонецЦикла; 

// Командировочные
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОсновныеНачисленияДанныеГрафика.ВидРасчета КАК ВидРасчета,
		|	ОсновныеНачисленияДанныеГрафика.Сотрудник КАК Сотрудник,
		|	ОсновныеНачисленияДанныеГрафика.НомерСтроки КАК НомерСтроки,
		|	ЕСТЬNULL(ДЕНЬ(ОсновныеНачисленияДанныеГрафика.ПериодДействияКонец) - ДЕНЬ(ОсновныеНачисленияДанныеГрафика.ПериодДействияНачало) + 1, 0) КАК ДниКомандировки,
		|	ЕСТЬNULL(ОсновныеНачисленияДанныеГрафика.ЗначениеЧасыФактическийПериодДействия, 0) КАК ФактЧасы,
		|	ЕСТЬNULL(ОсновныеНачисленияДанныеГрафика.ЗначениеЧасыПериодДействия, 0) КАК ПланЧасы
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисления.ДанныеГрафика(
		|			Регистратор = &Ссылка
		|				И ВидРасчета = &Командировка) КАК ОсновныеНачисленияДанныеГрафика
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Командировка", ПВРКомандировка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Суточные = Константы.КомандировочныеСуточнаяДоплата.Получить();
	Коэффициент = Константы.КомандировочныеКоэффициентКОкладу.Получить();
	
	НомераСтрокВыборки = Движения.ОсновныеНачисления.ВыгрузитьКолонку("НомерСтроки");	
	Пока Выборка.Следующий() Цикл
		
		
		Индекс = НомераСтрокВыборки.Найти(Выборка.НомерСтроки);
		СтрДвижение = Движения.ОсновныеНачисления.Получить(Индекс);
		
		ИндексОклад = ОкладыНомераСтрок.Найти(СтрДвижение.НомерСтроки);
		Если ОкладыПоСотрудникам[ИндексОклад].Оклад.Количество() = 0 Тогда
			Сообщить("Ошибка проведения документа Начисление зарплаты от " + Дата
				+ ". Не установлен оклад сотрудника " + СтрДвижение.Сотрудник
				+ " (строка №" + СтрДвижение.НомерСтроки + ")");
			Отказ = Истина;
			Продолжить;
		КонецЕсли;
		Оклад = ОкладыПоСотрудникам[ИндексОклад].Оклад[0];
		
		ПочасоваяДоплата = 0;
		Если Выборка.ПланЧасы <> 0 Тогда
			ПочасоваяДоплата = Оклад * Выборка.ФактЧасы / Выборка.ПланЧасы * Коэффициент;
		КонецЕсли; 
		СтрДвижение.Результат = ПочасоваяДоплата + Выборка.ДниКомандировки * Суточные;
		СтрДвижение.Факт = Выборка.ДниКомандировки;
	КонецЦикла; 
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 


	Движения.ОсновныеНачисления.Записать( , Истина);

КонецПроцедуры
